// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: windshift/locks/v1alpha1/service.proto

package locksv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Request to acquire, extend or release a lock.
type LockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * The type of lock request.
	// Types that are assignable to Lock:
	//
	//	*LockRequest_Acquire_
	//	*LockRequest_Extend_
	//	*LockRequest_Release_
	Lock isLockRequest_Lock `protobuf_oneof:"lock"`
}

func (x *LockRequest) Reset() {
	*x = LockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockRequest) ProtoMessage() {}

func (x *LockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockRequest.ProtoReflect.Descriptor instead.
func (*LockRequest) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{0}
}

func (m *LockRequest) GetLock() isLockRequest_Lock {
	if m != nil {
		return m.Lock
	}
	return nil
}

func (x *LockRequest) GetAcquire() *LockRequest_Acquire {
	if x, ok := x.GetLock().(*LockRequest_Acquire_); ok {
		return x.Acquire
	}
	return nil
}

func (x *LockRequest) GetExtend() *LockRequest_Extend {
	if x, ok := x.GetLock().(*LockRequest_Extend_); ok {
		return x.Extend
	}
	return nil
}

func (x *LockRequest) GetRelease() *LockRequest_Release {
	if x, ok := x.GetLock().(*LockRequest_Release_); ok {
		return x.Release
	}
	return nil
}

type isLockRequest_Lock interface {
	isLockRequest_Lock()
}

type LockRequest_Acquire_ struct {
	// * Acquire a new lock.
	Acquire *LockRequest_Acquire `protobuf:"bytes,1,opt,name=acquire,proto3,oneof"`
}

type LockRequest_Extend_ struct {
	// * Extend the duration of a lock you already hold.
	Extend *LockRequest_Extend `protobuf:"bytes,2,opt,name=extend,proto3,oneof"`
}

type LockRequest_Release_ struct {
	// * Release a lock you already hold.
	Release *LockRequest_Release `protobuf:"bytes,3,opt,name=release,proto3,oneof"`
}

func (*LockRequest_Acquire_) isLockRequest_Lock() {}

func (*LockRequest_Extend_) isLockRequest_Lock() {}

func (*LockRequest_Release_) isLockRequest_Lock() {}

// *
// Response to a lock request.
type LockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * The type of lock response.
	// Types that are assignable to Lock:
	//
	//	*LockResponse_Acquired_
	//	*LockResponse_Extended_
	//	*LockResponse_Released_
	//	*LockResponse_Rejected_
	Lock isLockResponse_Lock `protobuf_oneof:"lock"`
}

func (x *LockResponse) Reset() {
	*x = LockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResponse) ProtoMessage() {}

func (x *LockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResponse.ProtoReflect.Descriptor instead.
func (*LockResponse) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{1}
}

func (m *LockResponse) GetLock() isLockResponse_Lock {
	if m != nil {
		return m.Lock
	}
	return nil
}

func (x *LockResponse) GetAcquired() *LockResponse_Acquired {
	if x, ok := x.GetLock().(*LockResponse_Acquired_); ok {
		return x.Acquired
	}
	return nil
}

func (x *LockResponse) GetExtended() *LockResponse_Extended {
	if x, ok := x.GetLock().(*LockResponse_Extended_); ok {
		return x.Extended
	}
	return nil
}

func (x *LockResponse) GetReleased() *LockResponse_Released {
	if x, ok := x.GetLock().(*LockResponse_Released_); ok {
		return x.Released
	}
	return nil
}

func (x *LockResponse) GetRejected() *LockResponse_Rejected {
	if x, ok := x.GetLock().(*LockResponse_Rejected_); ok {
		return x.Rejected
	}
	return nil
}

type isLockResponse_Lock interface {
	isLockResponse_Lock()
}

type LockResponse_Acquired_ struct {
	// * A lock was acquired or extended.
	Acquired *LockResponse_Acquired `protobuf:"bytes,1,opt,name=acquired,proto3,oneof"`
}

type LockResponse_Extended_ struct {
	// * A lock was extended.
	Extended *LockResponse_Extended `protobuf:"bytes,2,opt,name=extended,proto3,oneof"`
}

type LockResponse_Released_ struct {
	// * A lock was released.
	Released *LockResponse_Released `protobuf:"bytes,3,opt,name=released,proto3,oneof"`
}

type LockResponse_Rejected_ struct {
	// * A lock was rejected.
	Rejected *LockResponse_Rejected `protobuf:"bytes,4,opt,name=rejected,proto3,oneof"`
}

func (*LockResponse_Acquired_) isLockResponse_Lock() {}

func (*LockResponse_Extended_) isLockResponse_Lock() {}

func (*LockResponse_Released_) isLockResponse_Lock() {}

func (*LockResponse_Rejected_) isLockResponse_Lock() {}

// *
// Event for when a lock has been acquired.
type LockAcquiredEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Name of the lock that was acquired.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// Owner of the lock, intended to be human-readable to allow
	// distinguishing between different clients.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// *
	// Expires is the timestamp at which the lock will expire on its own
	// if it is not extended or released.
	Expires *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *LockAcquiredEvent) Reset() {
	*x = LockAcquiredEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockAcquiredEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockAcquiredEvent) ProtoMessage() {}

func (x *LockAcquiredEvent) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockAcquiredEvent.ProtoReflect.Descriptor instead.
func (*LockAcquiredEvent) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{2}
}

func (x *LockAcquiredEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LockAcquiredEvent) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *LockAcquiredEvent) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

// *
// Event for when a lock has been extended.
type LockExtendedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Name of the lock that was extended.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// Owner of the lock, intended to be human-readable to allow
	// distinguishing between different clients.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// *
	// Expires is the timestamp at which the lock will expire on its own
	// if it is not extended or released.
	Expires *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *LockExtendedEvent) Reset() {
	*x = LockExtendedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockExtendedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockExtendedEvent) ProtoMessage() {}

func (x *LockExtendedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockExtendedEvent.ProtoReflect.Descriptor instead.
func (*LockExtendedEvent) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{3}
}

func (x *LockExtendedEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LockExtendedEvent) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *LockExtendedEvent) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

// *
// Event for when a lock has been released.
type LockReleasedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Name of the lock that was released.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// Owner of the lock, intended to be human-readable to allow
	// distinguishing between different clients.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *LockReleasedEvent) Reset() {
	*x = LockReleasedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockReleasedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockReleasedEvent) ProtoMessage() {}

func (x *LockReleasedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockReleasedEvent.ProtoReflect.Descriptor instead.
func (*LockReleasedEvent) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{4}
}

func (x *LockReleasedEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LockReleasedEvent) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

// *
// Request to monitor the state of a lock or many locks.
type MonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Name of the lock to monitor. If empty, all locks will be monitored.
	Name []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
}

func (x *MonitorRequest) Reset() {
	*x = MonitorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRequest) ProtoMessage() {}

func (x *MonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRequest.ProtoReflect.Descriptor instead.
func (*MonitorRequest) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{5}
}

func (x *MonitorRequest) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type MonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Timestamp of the event.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Event:
	//
	//	*MonitorResponse_Acquired
	//	*MonitorResponse_Extended
	//	*MonitorResponse_Released
	Event isMonitorResponse_Event `protobuf_oneof:"event"`
}

func (x *MonitorResponse) Reset() {
	*x = MonitorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorResponse) ProtoMessage() {}

func (x *MonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorResponse.ProtoReflect.Descriptor instead.
func (*MonitorResponse) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{6}
}

func (x *MonitorResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *MonitorResponse) GetEvent() isMonitorResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *MonitorResponse) GetAcquired() *LockAcquiredEvent {
	if x, ok := x.GetEvent().(*MonitorResponse_Acquired); ok {
		return x.Acquired
	}
	return nil
}

func (x *MonitorResponse) GetExtended() *LockExtendedEvent {
	if x, ok := x.GetEvent().(*MonitorResponse_Extended); ok {
		return x.Extended
	}
	return nil
}

func (x *MonitorResponse) GetReleased() *LockReleasedEvent {
	if x, ok := x.GetEvent().(*MonitorResponse_Released); ok {
		return x.Released
	}
	return nil
}

type isMonitorResponse_Event interface {
	isMonitorResponse_Event()
}

type MonitorResponse_Acquired struct {
	// *
	// A lock was acquired.
	Acquired *LockAcquiredEvent `protobuf:"bytes,2,opt,name=acquired,proto3,oneof"`
}

type MonitorResponse_Extended struct {
	// *
	// A lock was extended.
	Extended *LockExtendedEvent `protobuf:"bytes,3,opt,name=extended,proto3,oneof"`
}

type MonitorResponse_Released struct {
	// *
	// A lock was released.
	Released *LockReleasedEvent `protobuf:"bytes,4,opt,name=released,proto3,oneof"`
}

func (*MonitorResponse_Acquired) isMonitorResponse_Event() {}

func (*MonitorResponse_Extended) isMonitorResponse_Event() {}

func (*MonitorResponse_Released) isMonitorResponse_Event() {}

// *
// Request to get the history of a lock or many locks.
type HistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Name of the lock to get the history of. If empty, all locks will be
	// monitored.
	Name []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	// *
	// Maximum number of events to return. If empty, all events will be
	// returned.
	Limit *uint32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// *
	// If set, only events after this timestamp will be returned.
	After *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=after,proto3,oneof" json:"after,omitempty"`
}

func (x *HistoryRequest) Reset() {
	*x = HistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRequest) ProtoMessage() {}

func (x *HistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRequest.ProtoReflect.Descriptor instead.
func (*HistoryRequest) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{7}
}

func (x *HistoryRequest) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *HistoryRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *HistoryRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

type HistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Timestamp of the event.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Event:
	//
	//	*HistoryResponse_Acquired
	//	*HistoryResponse_Extended
	//	*HistoryResponse_Released
	Event isHistoryResponse_Event `protobuf_oneof:"event"`
}

func (x *HistoryResponse) Reset() {
	*x = HistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryResponse) ProtoMessage() {}

func (x *HistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryResponse.ProtoReflect.Descriptor instead.
func (*HistoryResponse) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{8}
}

func (x *HistoryResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *HistoryResponse) GetEvent() isHistoryResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *HistoryResponse) GetAcquired() *LockAcquiredEvent {
	if x, ok := x.GetEvent().(*HistoryResponse_Acquired); ok {
		return x.Acquired
	}
	return nil
}

func (x *HistoryResponse) GetExtended() *LockExtendedEvent {
	if x, ok := x.GetEvent().(*HistoryResponse_Extended); ok {
		return x.Extended
	}
	return nil
}

func (x *HistoryResponse) GetReleased() *LockReleasedEvent {
	if x, ok := x.GetEvent().(*HistoryResponse_Released); ok {
		return x.Released
	}
	return nil
}

type isHistoryResponse_Event interface {
	isHistoryResponse_Event()
}

type HistoryResponse_Acquired struct {
	// *
	// A lock was acquired.
	Acquired *LockAcquiredEvent `protobuf:"bytes,2,opt,name=acquired,proto3,oneof"`
}

type HistoryResponse_Extended struct {
	// *
	// A lock was extended.
	Extended *LockExtendedEvent `protobuf:"bytes,3,opt,name=extended,proto3,oneof"`
}

type HistoryResponse_Released struct {
	// *
	// A lock was released.
	Released *LockReleasedEvent `protobuf:"bytes,4,opt,name=released,proto3,oneof"`
}

func (*HistoryResponse_Acquired) isHistoryResponse_Event() {}

func (*HistoryResponse_Extended) isHistoryResponse_Event() {}

func (*HistoryResponse_Released) isHistoryResponse_Event() {}

// *
// Acquire a new lock. If the lock is already held, this request will
// fail with a `Rejected` response.
type LockRequest_Acquire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Name of the lock to acquire. Names are globally unique, and must
	// match the regex `[a-zA-Z0-9_-]+`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// Expires is the timestamp at which the lock will expire on its own
	// if it is not extended or released. It is recommended to keep this
	// value small, and extend the lock at an interval smaller than this
	// value.
	Expires *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires,proto3" json:"expires,omitempty"`
	// *
	// Maximum time to wait before giving up on acquiring the lock. This
	// lets the client simplify its logic by not having to handle retries
	// itself. If the lock is not acquired before this timeout, the
	// request will fail with a `Rejected` response.
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (x *LockRequest_Acquire) Reset() {
	*x = LockRequest_Acquire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockRequest_Acquire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockRequest_Acquire) ProtoMessage() {}

func (x *LockRequest_Acquire) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockRequest_Acquire.ProtoReflect.Descriptor instead.
func (*LockRequest_Acquire) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LockRequest_Acquire) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LockRequest_Acquire) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *LockRequest_Acquire) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// *
// Extend the duration of a lock you already hold. If the lock is not
// held, this request will fail with a `Rejected` response.
type LockRequest_Extend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Name of the lock to extend, must match the name of the lock you
	// already acquired with an `Acquire` request.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// Token is the token returned by the `Acquire` request. It is used
	// to verify that you are the owner of the lock you are trying to
	// extend.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// *
	// Expires is the new timestamp at which the lock will expire on its
	// own if it is not extended or released. See the `Acquire` request
	// for more information.
	Expires *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *LockRequest_Extend) Reset() {
	*x = LockRequest_Extend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockRequest_Extend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockRequest_Extend) ProtoMessage() {}

func (x *LockRequest_Extend) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockRequest_Extend.ProtoReflect.Descriptor instead.
func (*LockRequest_Extend) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *LockRequest_Extend) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LockRequest_Extend) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LockRequest_Extend) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

// *
// Release a lock you already hold. If the lock is not held, this request
// will fail with a `Rejected` response.
type LockRequest_Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Name of the lock to release, must match the name of the lock you
	// already acquired with an `Acquire` request.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// Token is the token returned by the `Acquire` request. It is used
	// to verify that you are the owner of the lock you are trying to
	// release.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *LockRequest_Release) Reset() {
	*x = LockRequest_Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockRequest_Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockRequest_Release) ProtoMessage() {}

func (x *LockRequest_Release) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockRequest_Release.ProtoReflect.Descriptor instead.
func (*LockRequest_Release) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{0, 2}
}

func (x *LockRequest_Release) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LockRequest_Release) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// *
// Acquired is sent when a lock is successfully acquired or extended. It
// contains the name of the lock, and a token that can be used to extend or
// release the lock.
type LockResponse_Acquired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Name of the lock that was acquired.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// Token is used to verify that you are the owner of the lock you are
	// trying to extend or release.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *LockResponse_Acquired) Reset() {
	*x = LockResponse_Acquired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResponse_Acquired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResponse_Acquired) ProtoMessage() {}

func (x *LockResponse_Acquired) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResponse_Acquired.ProtoReflect.Descriptor instead.
func (*LockResponse_Acquired) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *LockResponse_Acquired) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LockResponse_Acquired) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// *
// Extended is sent when a lock is successfully extended.
type LockResponse_Extended struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LockResponse_Extended) Reset() {
	*x = LockResponse_Extended{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResponse_Extended) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResponse_Extended) ProtoMessage() {}

func (x *LockResponse_Extended) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResponse_Extended.ProtoReflect.Descriptor instead.
func (*LockResponse_Extended) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *LockResponse_Extended) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// *
// Released is sent when a lock is successfully released.
type LockResponse_Released struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LockResponse_Released) Reset() {
	*x = LockResponse_Released{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResponse_Released) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResponse_Released) ProtoMessage() {}

func (x *LockResponse_Released) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResponse_Released.ProtoReflect.Descriptor instead.
func (*LockResponse_Released) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{1, 2}
}

func (x *LockResponse_Released) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LockResponse_Rejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Name of the lock that was rejected.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// The time the lock will expire.
	Expires *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *LockResponse_Rejected) Reset() {
	*x = LockResponse_Rejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResponse_Rejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResponse_Rejected) ProtoMessage() {}

func (x *LockResponse_Rejected) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_locks_v1alpha1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResponse_Rejected.ProtoReflect.Descriptor instead.
func (*LockResponse_Rejected) Descriptor() ([]byte, []int) {
	return file_windshift_locks_v1alpha1_service_proto_rawDescGZIP(), []int{1, 3}
}

func (x *LockResponse_Rejected) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LockResponse_Rejected) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

var File_windshift_locks_v1alpha1_service_proto protoreflect.FileDescriptor

var file_windshift_locks_v1alpha1_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xae, 0x04, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x1a, 0x99, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x68, 0x0a,
	0x06, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x1a, 0x33, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x06, 0x0a, 0x04,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x9e, 0x04, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x1a, 0x34, 0x0a, 0x08, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x1e, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x1e, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x54, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x73, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x11, 0x4c, 0x6f,
	0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22,
	0x3d, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x24,
	0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x49, 0x0a, 0x08, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x49, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x69, 0x6e,
	0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a,
	0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xb5, 0x02, 0x0a, 0x0f, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x08, 0x61, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x69, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x49, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x32, 0xad, 0x02, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x2e, 0x77, 0x69, 0x6e,
	0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x60, 0x0a,
	0x07, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x60, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x77, 0x69, 0x6e,
	0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x42, 0xf7, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x47, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2f, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x57, 0x4c,
	0x58, 0xaa, 0x02, 0x18, 0x57, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x73, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x18, 0x57,
	0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5c, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x24, 0x57, 0x69, 0x6e, 0x64, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5c, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1a, 0x57, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x3a, 0x3a, 0x4c, 0x6f, 0x63, 0x6b,
	0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_windshift_locks_v1alpha1_service_proto_rawDescOnce sync.Once
	file_windshift_locks_v1alpha1_service_proto_rawDescData = file_windshift_locks_v1alpha1_service_proto_rawDesc
)

func file_windshift_locks_v1alpha1_service_proto_rawDescGZIP() []byte {
	file_windshift_locks_v1alpha1_service_proto_rawDescOnce.Do(func() {
		file_windshift_locks_v1alpha1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_windshift_locks_v1alpha1_service_proto_rawDescData)
	})
	return file_windshift_locks_v1alpha1_service_proto_rawDescData
}

var file_windshift_locks_v1alpha1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_windshift_locks_v1alpha1_service_proto_goTypes = []interface{}{
	(*LockRequest)(nil),           // 0: windshift.locks.v1alpha1.LockRequest
	(*LockResponse)(nil),          // 1: windshift.locks.v1alpha1.LockResponse
	(*LockAcquiredEvent)(nil),     // 2: windshift.locks.v1alpha1.LockAcquiredEvent
	(*LockExtendedEvent)(nil),     // 3: windshift.locks.v1alpha1.LockExtendedEvent
	(*LockReleasedEvent)(nil),     // 4: windshift.locks.v1alpha1.LockReleasedEvent
	(*MonitorRequest)(nil),        // 5: windshift.locks.v1alpha1.MonitorRequest
	(*MonitorResponse)(nil),       // 6: windshift.locks.v1alpha1.MonitorResponse
	(*HistoryRequest)(nil),        // 7: windshift.locks.v1alpha1.HistoryRequest
	(*HistoryResponse)(nil),       // 8: windshift.locks.v1alpha1.HistoryResponse
	(*LockRequest_Acquire)(nil),   // 9: windshift.locks.v1alpha1.LockRequest.Acquire
	(*LockRequest_Extend)(nil),    // 10: windshift.locks.v1alpha1.LockRequest.Extend
	(*LockRequest_Release)(nil),   // 11: windshift.locks.v1alpha1.LockRequest.Release
	(*LockResponse_Acquired)(nil), // 12: windshift.locks.v1alpha1.LockResponse.Acquired
	(*LockResponse_Extended)(nil), // 13: windshift.locks.v1alpha1.LockResponse.Extended
	(*LockResponse_Released)(nil), // 14: windshift.locks.v1alpha1.LockResponse.Released
	(*LockResponse_Rejected)(nil), // 15: windshift.locks.v1alpha1.LockResponse.Rejected
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 17: google.protobuf.Duration
}
var file_windshift_locks_v1alpha1_service_proto_depIdxs = []int32{
	9,  // 0: windshift.locks.v1alpha1.LockRequest.acquire:type_name -> windshift.locks.v1alpha1.LockRequest.Acquire
	10, // 1: windshift.locks.v1alpha1.LockRequest.extend:type_name -> windshift.locks.v1alpha1.LockRequest.Extend
	11, // 2: windshift.locks.v1alpha1.LockRequest.release:type_name -> windshift.locks.v1alpha1.LockRequest.Release
	12, // 3: windshift.locks.v1alpha1.LockResponse.acquired:type_name -> windshift.locks.v1alpha1.LockResponse.Acquired
	13, // 4: windshift.locks.v1alpha1.LockResponse.extended:type_name -> windshift.locks.v1alpha1.LockResponse.Extended
	14, // 5: windshift.locks.v1alpha1.LockResponse.released:type_name -> windshift.locks.v1alpha1.LockResponse.Released
	15, // 6: windshift.locks.v1alpha1.LockResponse.rejected:type_name -> windshift.locks.v1alpha1.LockResponse.Rejected
	16, // 7: windshift.locks.v1alpha1.LockAcquiredEvent.expires:type_name -> google.protobuf.Timestamp
	16, // 8: windshift.locks.v1alpha1.LockExtendedEvent.expires:type_name -> google.protobuf.Timestamp
	16, // 9: windshift.locks.v1alpha1.MonitorResponse.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 10: windshift.locks.v1alpha1.MonitorResponse.acquired:type_name -> windshift.locks.v1alpha1.LockAcquiredEvent
	3,  // 11: windshift.locks.v1alpha1.MonitorResponse.extended:type_name -> windshift.locks.v1alpha1.LockExtendedEvent
	4,  // 12: windshift.locks.v1alpha1.MonitorResponse.released:type_name -> windshift.locks.v1alpha1.LockReleasedEvent
	16, // 13: windshift.locks.v1alpha1.HistoryRequest.after:type_name -> google.protobuf.Timestamp
	16, // 14: windshift.locks.v1alpha1.HistoryResponse.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 15: windshift.locks.v1alpha1.HistoryResponse.acquired:type_name -> windshift.locks.v1alpha1.LockAcquiredEvent
	3,  // 16: windshift.locks.v1alpha1.HistoryResponse.extended:type_name -> windshift.locks.v1alpha1.LockExtendedEvent
	4,  // 17: windshift.locks.v1alpha1.HistoryResponse.released:type_name -> windshift.locks.v1alpha1.LockReleasedEvent
	16, // 18: windshift.locks.v1alpha1.LockRequest.Acquire.expires:type_name -> google.protobuf.Timestamp
	17, // 19: windshift.locks.v1alpha1.LockRequest.Acquire.timeout:type_name -> google.protobuf.Duration
	16, // 20: windshift.locks.v1alpha1.LockRequest.Extend.expires:type_name -> google.protobuf.Timestamp
	16, // 21: windshift.locks.v1alpha1.LockResponse.Rejected.expires:type_name -> google.protobuf.Timestamp
	0,  // 22: windshift.locks.v1alpha1.LocksService.Lock:input_type -> windshift.locks.v1alpha1.LockRequest
	5,  // 23: windshift.locks.v1alpha1.LocksService.Monitor:input_type -> windshift.locks.v1alpha1.MonitorRequest
	7,  // 24: windshift.locks.v1alpha1.LocksService.History:input_type -> windshift.locks.v1alpha1.HistoryRequest
	1,  // 25: windshift.locks.v1alpha1.LocksService.Lock:output_type -> windshift.locks.v1alpha1.LockResponse
	6,  // 26: windshift.locks.v1alpha1.LocksService.Monitor:output_type -> windshift.locks.v1alpha1.MonitorResponse
	8,  // 27: windshift.locks.v1alpha1.LocksService.History:output_type -> windshift.locks.v1alpha1.HistoryResponse
	25, // [25:28] is the sub-list for method output_type
	22, // [22:25] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_windshift_locks_v1alpha1_service_proto_init() }
func file_windshift_locks_v1alpha1_service_proto_init() {
	if File_windshift_locks_v1alpha1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_windshift_locks_v1alpha1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockAcquiredEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockExtendedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockReleasedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockRequest_Acquire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockRequest_Extend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockRequest_Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResponse_Acquired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResponse_Extended); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResponse_Released); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_locks_v1alpha1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResponse_Rejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_windshift_locks_v1alpha1_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LockRequest_Acquire_)(nil),
		(*LockRequest_Extend_)(nil),
		(*LockRequest_Release_)(nil),
	}
	file_windshift_locks_v1alpha1_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*LockResponse_Acquired_)(nil),
		(*LockResponse_Extended_)(nil),
		(*LockResponse_Released_)(nil),
		(*LockResponse_Rejected_)(nil),
	}
	file_windshift_locks_v1alpha1_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MonitorResponse_Acquired)(nil),
		(*MonitorResponse_Extended)(nil),
		(*MonitorResponse_Released)(nil),
	}
	file_windshift_locks_v1alpha1_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_windshift_locks_v1alpha1_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*HistoryResponse_Acquired)(nil),
		(*HistoryResponse_Extended)(nil),
		(*HistoryResponse_Released)(nil),
	}
	file_windshift_locks_v1alpha1_service_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_windshift_locks_v1alpha1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_windshift_locks_v1alpha1_service_proto_goTypes,
		DependencyIndexes: file_windshift_locks_v1alpha1_service_proto_depIdxs,
		MessageInfos:      file_windshift_locks_v1alpha1_service_proto_msgTypes,
	}.Build()
	File_windshift_locks_v1alpha1_service_proto = out.File
	file_windshift_locks_v1alpha1_service_proto_rawDesc = nil
	file_windshift_locks_v1alpha1_service_proto_goTypes = nil
	file_windshift_locks_v1alpha1_service_proto_depIdxs = nil
}
