syntax = "proto3";

package windshift.events.v1alpha1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// Service to work with events, including publishing and subscribing to events.
service EventsService {
	// Ensure that a certain stream exists. Used to create streams to collect
	// events for certain subjects. Subscriptions can then be created to
	// subscribe to these streams.
	rpc EnsureStream(EnsureStreamRequest) returns (EnsureStreamResponse);

	// Ensure that a certain consumer exists and can be subscribed to.
	rpc EnsureConsumer(EnsureConsumerRequest) returns (EnsureConsumerResponse);

	// Delete a consumer.
	rpc DeleteConsumer(DeleteConsumerRequest) returns (DeleteConsumerResponse);

	// Publish an event.
	rpc PublishEvent(PublishEventRequest) returns (PublishEventResponse) {}

	// Events subscribes to events and returns them as they are published. The
	// stream is bidirectional, so the client can accept/reject events as they
	// are received.
	rpc Events(stream EventsRequest) returns (stream EventsResponse) {}
}

message EnsureStreamRequest {
	// Policy for how events in the stream should be retained.
	message RetentionPolicy {
		// Maximum age of events in the stream. Events older than this will be
		// deleted.
		optional google.protobuf.Duration max_age = 1;
		// Maximum number of events in the stream. Events beyond this limit will
		// be deleted.
		optional uint64 max_events = 2;
		// Maximum size of events in the stream. Events beyond this limit will
		// be deleted.
		optional uint64 max_bytes = 3;

		// Policy to use when discarding events the stream is full. Defaults
		// to discarding old events.
		optional DiscardPolicy discard_policy = 4;
		// If discard policy is set to discard new events, settings this to
		// true will discard new events per subject instead of globally.
		optional bool discard_new_per_subject = 5;
	}

	// Policy to use when discarding events when the stream is full.
	enum DiscardPolicy {
		DISCARD_POLICY_UNSPECIFIED = 0;
		// Discard old events when the stream is full.
		DISCARD_POLICY_OLD = 1;
		// Discard new events when the stream is full.
		DISCARD_POLICY_NEW = 2;
	}

	// List of subjects that will be collected into the stream.
	message Subjects {
		// List of subjects.
		repeated string subjects = 1;
	}

	// A stream that can be mirrored into the stream.
	message StreamSource {
		// Stream to receive events from.
		string name = 1;

		// Optionally define where to start receiving events from.
		optional StreamPointer pointer = 2;

		// Optionally filter events by subject.
		repeated string filter_subjects = 3;
	}

	// Multiple streams that can be mirrored into the stream.
	message StreamSources {
		// The streams to receive events from.
		repeated StreamSource sources = 1;
	}

	// Type of storage to use for the stream.
	enum StorageType {
		// Unspecified storage type, will default to file based storage.
		STORAGE_TYPE_UNSPECIFIED = 0;
		// Use a file based storage.
		STORAGE_TYPE_FILE = 1;
		// Use a memory based storage.
		STORAGE_TYPE_MEMORY = 2;
	}

	// Define how the stream should be stored.
	message Storage {
		// The type of storage to use for the stream.
		optional StorageType type = 1;
		// Number of replicas to use for the stream.
		optional uint32 replicas = 2;
	}

	// Name of the stream. Will be referenced by consumers and subscribers.
	string name = 1;
	// Retention policy for the stream.
	optional RetentionPolicy retention_policy = 2;

	// Source of events for the stream.
	oneof source {
		// Subjects to collect events for.
		Subjects subjects = 3;
		// Stream to mirror. If set can not be changed.
		StreamSource mirror = 4;
		// Streams to receive events from.
		StreamSources sources = 5;
	}

	// Configuration for how the stream should be stored.
	optional Storage storage = 6;

	// The amount of time duplicate detection should be enabled for. This is
	// how long an idempotency key will be stored and checked for.
	optional google.protobuf.Duration deduplication_window = 7;

	// The maximum size of an event in bytes. If not provided, will default to
	// 1MB.
	optional uint32 max_event_size = 8;
}

message EnsureStreamResponse {}

message EnsureConsumerRequest {
	// The event stream to consume events from.
	string stream = 1;
	// The id of the consumer, should be unique to stream if provided,
	// providing one creates a durable consumer activates support for
	// resumption and shared processing of events.
	//
	// If not provided, the consumer will be ephemeral and will not be
	// able to resume or share processing of events.
	optional string name = 2;
	// The subjects to subscribe to.
	repeated string subjects = 3;
	// The pointer to start receiving events from. Used to control how this
	// subscriber will receive old events. If not specified only new events
	// will be received.
	optional StreamPointer pointer = 4;
	// The timeout for events, after which they will be resent. If not
	// provided a 30 second timeout will be used.
	//
	// Events will need to be accepted, rejected or pinged before the
	// timeout expires, otherwise they will be marked as failed and queued
	// for delivery again.
	optional google.protobuf.Duration timeout = 5;
}

message EnsureConsumerResponse {
	// The id of the subscription.
	string id = 1;
}

message DeleteConsumerRequest {
	// The event stream to delete the consumer from.
	string stream = 1;
	// The id of the consumer to delete.
	string id = 2;
}

message DeleteConsumerResponse {}

// Request to publish an event.
message PublishEventRequest {
	// The subject of the event.
	string subject = 1;
	// Headers to use for the event.
	optional Headers headers = 2;
	// The event to publish.
	google.protobuf.Any data = 3;
	// The id of the last event that was published to the stream. Used for
	// optimistic concurrency control, if the last event id does not match
	// the current last event id, the publish will fail.
	optional uint64 expected_last_id = 4;
}

// Response to publish an event.
message PublishEventResponse {
	// The id of the published event.
	uint64 id = 1;
}

// Request to subscribe to events or to accept, reject or ping events.
// The first message sent on the stream must be a Subscribe message, after
// which the client can send Accept, Reject or Ping messages.
//
// Events should be either accepted or rejected, otherwise they will be resent
// after a timeout. If processing takes of an event takes a while pings should
// be sent to indicate that the event is still being processed.
message EventsRequest {
	// Subscribe to events, must be sent as the first message in the stream.
	message Subscribe {
		// The id of the stream to subscribe to.
		string stream = 1;
		// The id of the subscriber, should be an id previously created using
		// EnsureSubscription.
		string subscriber_id = 2;
		// Batch size for fetching events, controls how many events are fetched
		// at a time. If not provided will default to 5.
		optional uint64 batch_size = 3;
		// Control if the stream will automatically close when all events have
		// been received. Setting this will check what the latest event is at
		// the time of subscribing and close the stream when that event has
		// been received.
		optional bool auto_close = 4;
	}

	// Accept indicates that some events have been successfully processed.
	message Accept {
		// The identifiers to accept.
		repeated uint64 ids = 1;
	}

	// Reject indicates that some events have failed to be processed.
	message Reject {
		// The identifiers to reject.
		repeated uint64 ids = 1;
		// Whether to retry the events or not.
		bool retry = 2;
	}

	// Ping events to indicate that they are still being processed.
	message Ping {
		// The identifiers of the events that are currently being processed.
		repeated uint64 ids = 1;
	}

	oneof request {
		// Subscribe to events, must be sent as the first message in the stream
		// to establish what events to listen to.
		Subscribe subscribe = 1;
		// Acknowledge that some events have been successfully processed.
		Accept accept = 2;
		// Acknowledge that some events have failed to be processed.
		Reject reject = 3;
		// Ping events to indicate that they are still being processed.
		Ping ping = 4;
	}
}

message EventsResponse {
	// Confirmation that the client has subscribed to events.
	message Subscribed {}

	// Confirmation that some events were accepted.
	message AcceptConfirmation {
		// The identifiers that were accepted.
		repeated uint64 ids = 1;
	}

	// Confirmation that some events were rejected.
	message RejectConfirmation {
		// The identifiers that were rejected.
		repeated uint64 ids = 1;
	}

	// Confirmation that a ping was received.
	message PingConfirmation {
		// The identifiers of the events that are currently being processed.
		repeated uint64 ids = 1;
	}

	oneof response {
		// An event that was published.
		Event event = 1;

		// Confirmation that the client has subscribed to events.
		Subscribed subscribed = 2;
		// Confirmation that some events were accepted.
		AcceptConfirmation accept_confirmation = 3;
		// Confirmation that some events were rejected.
		RejectConfirmation reject_confirmation = 4;
		// Confirmation that a ping was received.
		PingConfirmation ping_confirmation = 5;
	}
}

// A pointer to start receiving events from.
message StreamPointer {
	oneof pointer {
		// Receive all events currently available.
		bool start = 1;
		// Receive only future events.
		bool end = 2;
		// The time to start receiving events from.
		google.protobuf.Timestamp time = 3;
		// The id of the event to start receiving events from.
		uint64 id = 5;
	}
}

// An event that was published.
message Event {
	// Identifier of the event, used to accept, reject or ping the event. Can
	// also be used to resume processing of events if using an ephemeral
	// subscriber.
	uint64 id = 1;
	// The subject of this event.
	string subject = 2;
	// Headers of the event.
	Headers headers = 3;
	// Data of the event.
	google.protobuf.Any data = 4;
}

message Headers {
	// Timestamp of the event, if not set, the server will use the current time.
	optional google.protobuf.Timestamp timestamp = 1;
	// Key used to prevent duplicate events from being stored if a retry is
	// needed. Should be set to a unique value for each publish request of a
	// specific event.
	optional string idempotency_key = 2;
	// Parent trace id in the W3C trace context format.
	optional string trace_parent = 3;
	// Trace state in the W3C trace context format.
	optional string trace_state = 4;
}
