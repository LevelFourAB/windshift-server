// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: windshift/events/v1alpha1/service.proto

package eventsv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventsService_EnsureStream_FullMethodName   = "/windshift.events.v1alpha1.EventsService/EnsureStream"
	EventsService_EnsureConsumer_FullMethodName = "/windshift.events.v1alpha1.EventsService/EnsureConsumer"
	EventsService_DeleteConsumer_FullMethodName = "/windshift.events.v1alpha1.EventsService/DeleteConsumer"
	EventsService_PublishEvent_FullMethodName   = "/windshift.events.v1alpha1.EventsService/PublishEvent"
	EventsService_Events_FullMethodName         = "/windshift.events.v1alpha1.EventsService/Events"
)

// EventsServiceClient is the client API for EventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsServiceClient interface {
	// Ensure that a certain stream exists. Used to create streams to collect
	// events for certain subjects. Subscriptions can then be created to
	// subscribe to these streams.
	EnsureStream(ctx context.Context, in *EnsureStreamRequest, opts ...grpc.CallOption) (*EnsureStreamResponse, error)
	// Ensure that a certain consumer exists and can be subscribed to.
	EnsureConsumer(ctx context.Context, in *EnsureConsumerRequest, opts ...grpc.CallOption) (*EnsureConsumerResponse, error)
	// Delete a consumer.
	DeleteConsumer(ctx context.Context, in *DeleteConsumerRequest, opts ...grpc.CallOption) (*DeleteConsumerResponse, error)
	// Publish an event.
	PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error)
	// Events subscribes to events and returns them as they are published. The
	// stream is bidirectional, so the client can accept/reject events as they
	// are received.
	Events(ctx context.Context, opts ...grpc.CallOption) (EventsService_EventsClient, error)
}

type eventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsServiceClient(cc grpc.ClientConnInterface) EventsServiceClient {
	return &eventsServiceClient{cc}
}

func (c *eventsServiceClient) EnsureStream(ctx context.Context, in *EnsureStreamRequest, opts ...grpc.CallOption) (*EnsureStreamResponse, error) {
	out := new(EnsureStreamResponse)
	err := c.cc.Invoke(ctx, EventsService_EnsureStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) EnsureConsumer(ctx context.Context, in *EnsureConsumerRequest, opts ...grpc.CallOption) (*EnsureConsumerResponse, error) {
	out := new(EnsureConsumerResponse)
	err := c.cc.Invoke(ctx, EventsService_EnsureConsumer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) DeleteConsumer(ctx context.Context, in *DeleteConsumerRequest, opts ...grpc.CallOption) (*DeleteConsumerResponse, error) {
	out := new(DeleteConsumerResponse)
	err := c.cc.Invoke(ctx, EventsService_DeleteConsumer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error) {
	out := new(PublishEventResponse)
	err := c.cc.Invoke(ctx, EventsService_PublishEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) Events(ctx context.Context, opts ...grpc.CallOption) (EventsService_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventsService_ServiceDesc.Streams[0], EventsService_Events_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsServiceEventsClient{stream}
	return x, nil
}

type EventsService_EventsClient interface {
	Send(*EventsRequest) error
	Recv() (*EventsResponse, error)
	grpc.ClientStream
}

type eventsServiceEventsClient struct {
	grpc.ClientStream
}

func (x *eventsServiceEventsClient) Send(m *EventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventsServiceEventsClient) Recv() (*EventsResponse, error) {
	m := new(EventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsServiceServer is the server API for EventsService service.
// All implementations must embed UnimplementedEventsServiceServer
// for forward compatibility
type EventsServiceServer interface {
	// Ensure that a certain stream exists. Used to create streams to collect
	// events for certain subjects. Subscriptions can then be created to
	// subscribe to these streams.
	EnsureStream(context.Context, *EnsureStreamRequest) (*EnsureStreamResponse, error)
	// Ensure that a certain consumer exists and can be subscribed to.
	EnsureConsumer(context.Context, *EnsureConsumerRequest) (*EnsureConsumerResponse, error)
	// Delete a consumer.
	DeleteConsumer(context.Context, *DeleteConsumerRequest) (*DeleteConsumerResponse, error)
	// Publish an event.
	PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error)
	// Events subscribes to events and returns them as they are published. The
	// stream is bidirectional, so the client can accept/reject events as they
	// are received.
	Events(EventsService_EventsServer) error
	mustEmbedUnimplementedEventsServiceServer()
}

// UnimplementedEventsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventsServiceServer struct {
}

func (UnimplementedEventsServiceServer) EnsureStream(context.Context, *EnsureStreamRequest) (*EnsureStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureStream not implemented")
}
func (UnimplementedEventsServiceServer) EnsureConsumer(context.Context, *EnsureConsumerRequest) (*EnsureConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureConsumer not implemented")
}
func (UnimplementedEventsServiceServer) DeleteConsumer(context.Context, *DeleteConsumerRequest) (*DeleteConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumer not implemented")
}
func (UnimplementedEventsServiceServer) PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEvent not implemented")
}
func (UnimplementedEventsServiceServer) Events(EventsService_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedEventsServiceServer) mustEmbedUnimplementedEventsServiceServer() {}

// UnsafeEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServiceServer will
// result in compilation errors.
type UnsafeEventsServiceServer interface {
	mustEmbedUnimplementedEventsServiceServer()
}

func RegisterEventsServiceServer(s grpc.ServiceRegistrar, srv EventsServiceServer) {
	s.RegisterService(&EventsService_ServiceDesc, srv)
}

func _EventsService_EnsureStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).EnsureStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsService_EnsureStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).EnsureStream(ctx, req.(*EnsureStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_EnsureConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).EnsureConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsService_EnsureConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).EnsureConsumer(ctx, req.(*EnsureConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_DeleteConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).DeleteConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsService_DeleteConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).DeleteConsumer(ctx, req.(*DeleteConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_PublishEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).PublishEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsService_PublishEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).PublishEvent(ctx, req.(*PublishEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsServiceServer).Events(&eventsServiceEventsServer{stream})
}

type EventsService_EventsServer interface {
	Send(*EventsResponse) error
	Recv() (*EventsRequest, error)
	grpc.ServerStream
}

type eventsServiceEventsServer struct {
	grpc.ServerStream
}

func (x *eventsServiceEventsServer) Send(m *EventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventsServiceEventsServer) Recv() (*EventsRequest, error) {
	m := new(EventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsService_ServiceDesc is the grpc.ServiceDesc for EventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "windshift.events.v1alpha1.EventsService",
	HandlerType: (*EventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnsureStream",
			Handler:    _EventsService_EnsureStream_Handler,
		},
		{
			MethodName: "EnsureConsumer",
			Handler:    _EventsService_EnsureConsumer_Handler,
		},
		{
			MethodName: "DeleteConsumer",
			Handler:    _EventsService_DeleteConsumer_Handler,
		},
		{
			MethodName: "PublishEvent",
			Handler:    _EventsService_PublishEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _EventsService_Events_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "windshift/events/v1alpha1/service.proto",
}
