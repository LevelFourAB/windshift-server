syntax = "proto3";

package windshift.events.v1alpha1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// Service to work with events, including publishing and subscribing to events.
service EventsService {
	// Ensure that a certain stream exists. Used to create streams to collect
	// events for certain subjects. Subscriptions can then be created to
	// subscribe to these streams.
	rpc EnsureStream(EnsureStreamRequest) returns (EnsureStreamResponse);

	// Ensure that a certain consumer exists and can be subscribed to.
	rpc EnsureConsumer(EnsureConsumerRequest) returns (EnsureConsumerResponse);

	// Delete a consumer.
	rpc DeleteConsumer(DeleteConsumerRequest) returns (DeleteConsumerResponse);

	// Publish an event.
	rpc PublishEvent(PublishEventRequest) returns (PublishEventResponse) {}

	// Consume subscribes to events and returns them as they are published. The
	// stream is bidirectional, so the client can acknowledge/reject events as
	// they are received.
	//
	// The first message sent on the stream must be a Subscribe message, after
	// which the server will respond with a Subscribed message. The client will
	// then receive events as they are published, and should acknowledge, reject
	// and ping as needed.
	rpc Consume(stream ConsumeRequest) returns (stream ConsumeResponse) {}
}

message EnsureStreamRequest {
	// Policy for how events in the stream should be retained.
	message RetentionPolicy {
		// Maximum age of events in the stream. Events older than this will be
		// deleted.
		optional google.protobuf.Duration max_age = 1;
		// Maximum number of events in the stream. Events beyond this limit will
		// be deleted.
		optional uint64 max_events = 2;
		// Maximum number of events per subject in the stream. Events beyond
		// this limit will be deleted.
		optional uint64 max_events_per_subject = 3;
		// Maximum total byte size of all events in the stream. Events beyond
		// this limit will be deleted.
		optional uint64 max_bytes = 4;

		// Policy to use when discarding events the stream is full. Defaults
		// to discarding old events.
		optional DiscardPolicy discard_policy = 5;
		// If discard policy is set to discard new events, settings this to
		// true will discard new events per subject instead of globally.
		optional bool discard_new_per_subject = 6;
	}

	// Policy to use when discarding events when the stream is full.
	enum DiscardPolicy {
		DISCARD_POLICY_UNSPECIFIED = 0;
		// Discard old events when the stream is full.
		DISCARD_POLICY_OLD = 1;
		// Discard new events when the stream is full.
		DISCARD_POLICY_NEW = 2;
	}

	// List of subjects that will be collected into the stream.
	message Subjects {
		// List of subjects. Subjects are case-sensitive and should only
		// contain the following characters:
		//
		// - `a` to `z`, `A` to `Z` and `0` to `9` are allowed.
		// - `_` and `-` are allowed for separating words, but the use of
		//   camelCase is recommended.
		// - `.` is allowed and used as a hierarchy separator, such as
		//   `time.us.east` and `time.eu.sweden`, which share the `time`
		//   prefix.
		// - `*` matches a single token, at any level of the subject. Such as
		//   `time.*.east` will match `time.us.east` and `time.eu.east` but
		//   not `time.us.west` or `time.us.central.east`. Similarly `time.us.*`
		//   will match `time.us.east` but not `time.us.east.atlanta`.
		//
		//   The `*` wildcard can be used multiple times in a subject, such as
		//   `time.*.*` will match `time.us.east` and `time.eu.west` but not
		//   `time.us.east.atlanta`.
		// - `>` matches one or more tokens at the tail of a subject, and can
		//   only be used as the last token. Such as `time.us.>` will match
		//   `time.us.east` and `time.us.east.atlanta` but not `time.eu.east`.
		//
		// See NATS concepts: https://docs.nats.io/nats-concepts/subjects
		repeated string subjects = 1;
	}

	// Source describing mirroring/aggregation of events from another stream
	// into this stream.
	message StreamSource {
		// Stream to receive events from. The stream must already exist.
		string name = 1;

		// Optionally define where to start receiving events from.
		optional StreamPointer pointer = 2;

		// Optionally filter events by subject. Subjects are case-sensitive and
		// should only contain the following characters:
		//
		// - `a` to `z`, `A` to `Z` and `0` to `9` are allowed.
		// - `_` and `-` are allowed for separating words, but the use of
		//   camelCase is recommended.
		// - `.` is allowed and used as a hierarchy separator, such as
		//   `time.us.east` and `time.eu.sweden`, which share the `time`
		//   prefix.
		// - `*` matches a single token, at any level of the subject. Such as
		//   `time.*.east` will match `time.us.east` and `time.eu.east` but
		//   not `time.us.west` or `time.us.central.east`. Similarly `time.us.*`
		//   will match `time.us.east` but not `time.us.east.atlanta`.
		//
		//   The `*` wildcard can be used multiple times in a subject, such as
		//   `time.*.*` will match `time.us.east` and `time.eu.west` but not
		//   `time.us.east.atlanta`.
		// - `>` matches one or more tokens at the tail of a subject, and can
		//   only be used as the last token. Such as `time.us.>` will match
		//   `time.us.east` and `time.us.east.atlanta` but not `time.eu.east`.
		//
		// See NATS concepts: https://docs.nats.io/nats-concepts/subjects
		repeated string filter_subjects = 3;
	}

	// Multiple streams that can be mirrored into the stream.
	message StreamSources {
		// The streams to receive events from.
		repeated StreamSource sources = 1;
	}

	// Type of storage to use for the stream.
	enum StorageType {
		// Unspecified storage type, will default to file based storage.
		STORAGE_TYPE_UNSPECIFIED = 0;
		// Use a file based storage.
		STORAGE_TYPE_FILE = 1;
		// Use a memory based storage.
		STORAGE_TYPE_MEMORY = 2;
	}

	// Define how the stream should be stored.
	message Storage {
		// The type of storage to use for the stream. Defaults to file based
		// storage.
		optional StorageType type = 1;
		// Number of replicas to use for the stream. Defaults to 1.
		optional uint32 replicas = 2;
	}

	// Name of the stream. Will be referenced by consumers and subscribers.
	//
	// Names are case-sensitive and should only contain the following
	// characters:
	//
	// - `a` to `z`, `A` to `Z` and `0` to `9` are allowed.
	// - `_` and `-` are allowed as non-alphanumeric characters for
	//   separating words.
	string name = 1;
	// Retention policy for the stream. If no retention policy is set events
	// will be retained forever.
	optional RetentionPolicy retention_policy = 2;

	// Source of events for the stream.
	oneof source {
		// Subjects to collect events for.
		Subjects subjects = 3;
		// Stream to mirror. If set can not be changed.
		StreamSource mirror = 4;
		// Streams to receive events from.
		StreamSources aggregate = 5;
	}

	// Configuration for how the stream should be stored.
	optional Storage storage = 6;

	// The amount of time duplicate detection should be enabled for. This is
	// how long an idempotency key will be stored and checked for. Defaults to
	// 2 minutes.
	optional google.protobuf.Duration deduplication_window = 7;

	// The maximum size of an event in bytes. If not provided, will default to
	// 1MiB.
	optional uint32 max_event_size = 8;
}

message EnsureStreamResponse {}

message EnsureConsumerRequest {
	// The event stream to consume events from. The stream must already exist.
	string stream = 1;
	// The name of the consumer, should be unique to stream if provided,
	// providing one creates a durable consumer which supports resumption and
	// shared processing of events.
	//
	// If not provided, the consumer will be ephemeral and will not be
	// able to resume or share processing of events.
	//
	// When a name is specified it is case-sensitive and should only
	// contain the following characters:
	//
	// - `a` to `z`, `A` to `Z` and `0` to `9` are allowed.
	// - `_` and `-` are allowed for separating words, but the use of camelCase
	//   is recommended.
	optional string name = 2;
	// The subjects to subscribe to. Subjects are case-sensitive and should only
	// contain the following characters:
	//
	// - `a` to `z`, `A` to `Z` and `0` to `9` are allowed.
	// - `_` and `-` are allowed for separating words, but the use of camelCase
	//   is recommended.
	// - `.` is allowed and used as a hierarchy separator, such as
	//   `time.us.east` and `time.eu.sweden`, which share the `time`
	//   prefix.
	// - `*` matches a single token, at any level of the subject. Such as
	//   `time.*.east` will match `time.us.east` and `time.eu.east` but not
	//   `time.us.west` or `time.us.central.east`. Similarly `time.us.*` will
	//   match `time.us.east` but not `time.us.east.atlanta`.
	//
	//   The `*` wildcard can be used multiple times in a subject, such as
	//   `time.*.*` will match `time.us.east` and `time.eu.west` but not
	//   `time.us.east.atlanta`.
	// - `>` matches one or more tokens at the tail of a subject, and can only
	//   be used as the last token. Such as `time.us.>` will match
	//   `time.us.east` and `time.us.east.atlanta` but not `time.eu.east`.
	//
	// See NATS concepts: https://docs.nats.io/nats-concepts/subjects
	repeated string subjects = 3;
	// The pointer to start receiving events from. Used to control how this
	// subscriber will receive old events. If not specified only new events
	// will be received.
	optional StreamPointer pointer = 4;
	// The timeout for events, after which they will be resent. If not
	// provided a 30 second timeout will be used.
	//
	// Events will need to be acknowledged, rejected or pinged before the
	// timeout expires, otherwise they will be marked as failed and queued
	// for delivery again.
	optional google.protobuf.Duration processing_timeout = 5;
}

message EnsureConsumerResponse {
	// The id of the subscription.
	string id = 1;
}

message DeleteConsumerRequest {
	// The event stream to delete the consumer from.
	string stream = 1;
	// The id of the consumer to delete.
	string id = 2;
}

message DeleteConsumerResponse {}

// Request to publish an event.
message PublishEventRequest {
	// The subject of the event. Subjects are case-sensitive and should only
	// contain the following characters:
	//
	// - `a` to `z`, `A` to `Z` and `0` to `9` are allowed.
	// - `_` and `-` are allowed for separating words, but the use of camelCase
	//   is recommended.
	// - `.` is allowed and used as a hierarchy separator, such as
	//   `time.us.east` and `time.eu.sweden`, which share the `time` prefix.
	//
	// If the subject is not bound to a stream the event will be rejected.
	//
	// See NATS concepts: https://docs.nats.io/nats-concepts/subjects
	string subject = 1;
	// The event data. The data is dynamic and it is up to the publisher
	// and subscriber to agree on the Protobuf messages to support.
	//
	// Each subject can support several different types of data, which can be
	// useful to support different versions of the data. Subscribers should
	// ignore data they do not understand.
	google.protobuf.Any data = 2;
	// Timestamp of the event, if not set, the server will use the current time.
	optional google.protobuf.Timestamp timestamp = 3;
	// Key used to prevent duplicate events from being stored if a retry is
	// needed. Should be set to a unique value for each publish request of a
	// specific event.
	optional string idempotency_key = 4;
	// The id of the last event that was published to the stream. Used for
	// optimistic concurrency control, if the last event id does not match
	// the current last event id, the publish will fail.
	optional uint64 expected_last_id = 5;
}

// Response to publish an event.
message PublishEventResponse {
	// The id of the published event.
	uint64 id = 1;
}

// Request to subscribe to events or to acknowledge, reject or ping events.
// The first message sent on the stream must be a Subscribe message, after
// which the client can send Ack, Reject or Ping messages.
//
// Events should be either acknowledge or rejected, otherwise they will be
// resent after a timeout. If processing takes of an event takes a while pings
// should be sent to indicate that the event is still being processed.
message ConsumeRequest {
	// Subscribe to events, must be sent as the first message in the stream.
	message Subscribe {
		// The name of the stream to subscribe to. The stream must already
		// exist.
		string stream = 1;
		// The name of the consumer, should be an name previously created using
		// EnsureConsumer.
		string consumer = 2;
		// The maximum number of events to process at once. If not provided
		// a limit of 50 will be used.
		//
		// In most cases this should be set to approximately the number of
		// events that can be processed in parallel plus a small buffer. The
		// server will ramp up events to this limit, and will only send more
		// events once the client has acknowledged or rejected events.
		optional uint64 max_processing_events = 4;
	}

	// Ack indicates that some events have been successfully processed.
	message Ack {
		// The identifiers to acknowledge.
		repeated uint64 ids = 1;
	}

	// Reject indicates that some events have failed to be processed.
	message Reject {
		// The identifiers to reject.
		repeated uint64 ids = 1;
		// Permanently reject the events, if not provided the events will be
		// retried after a timeout. If permanently is set to true, the events
		// will not be redelivered.
		//
		// Can not be combined with delay.
		optional bool permanently = 2;
		// Optional time to wait before redelivering the events. If not
		// provided the server will decide how long to wait.
		//
		// Can not be combined with permanently.
		optional google.protobuf.Duration delay = 3;
	}

	// Ping events to indicate that they are still being processed. Pings should
	// be sent regularly to indicate that the events are still being processed.
	// It is recommended to send pings at half the interval of the processing
	// timeout.
	message Ping {
		// The identifiers of the events that are currently being processed.
		repeated uint64 ids = 1;
	}

	oneof request {
		// Subscribe to events, must be sent as the first message in the stream
		// to establish what events to listen to.
		//
		// A ConsumeResponse.Subscribed message will be sent in response to
		// this message. If the subscription fails, the stream will be closed.
		Subscribe subscribe = 1;
		// Acknowledge that some events have been successfully processed. When
		// an event is acknowledged a ConsumeResponse.AckConfirmation message
		// will be sent in response.
		Ack ack = 2;
		// Acknowledge that some events have failed to be processed. When an
		// event is rejected a ConsumeResponse.RejectConfirmation message will
		// be sent in response.
		Reject reject = 3;
		// Ping events to indicate that they are still being processed. When
		// an event is pinged a ConsumeResponse.PingConfirmation message will
		// be sent in response.
		Ping ping = 4;
	}
}

message ConsumeResponse {
	// Confirmation that the client has subscribed to events.
	message Subscribed {
		// The timeout for events, after which they will be resent if not
		// acknowledged or rejected. Can be used by the client to implements
		// features such as pings.
		google.protobuf.Duration processing_timeout = 1;
	}

	// Confirmation that some events were acknowledged.
	message AckConfirmation {
		// The identifiers that were acknowledged.
		repeated uint64 ids = 1;
		// Identifiers that were invalid, such as already being acknowledged or
		// rejected, should not be retried by the client.
		repeated uint64 invalid_ids = 2;
		// Identifiers that could not be processed temporarily, should be
		// retried by the client.
		repeated uint64 temporary_failed_ids = 3;
	}

	// Confirmation that some events were rejected.
	message RejectConfirmation {
		// The identifiers that were rejected.
		repeated uint64 ids = 1;
		// Identifiers that were invalid, such as already being acknowledged or
		// rejected, should not be retried by the client.
		repeated uint64 invalid_ids = 2;
		// Identifiers that could not be processed temporarily, should be
		// retried by the client.
		repeated uint64 temporary_failed_ids = 3;
	}

	// Confirmation that a ping was received.
	message PingConfirmation {
		// The identifiers of the events that are currently being processed.
		repeated uint64 ids = 1;
		// Identifiers that were invalid, such as already being acknowledged or
		// rejected, should not be retried by the client.
		repeated uint64 invalid_ids = 2;
		// Identifiers that could not be processed temporarily, should be
		// retried by the client.
		repeated uint64 temporary_failed_ids = 3;
	}

	oneof response {
		// An event that was published.
		Event event = 1;

		// Confirmation that the client has subscribed to events.
		Subscribed subscribed = 2;
		// Confirmation that some events were acknowledged.
		AckConfirmation ack_confirmation = 3;
		// Confirmation that some events were rejected.
		RejectConfirmation reject_confirmation = 4;
		// Confirmation that a ping was received.
		PingConfirmation ping_confirmation = 5;
	}
}

// A pointer to a position in a stream. Used to determine where to start
// consuming events from.
message StreamPointer {
	oneof pointer {
		// Receive all events currently available.
		bool start = 1;
		// Receive only future events.
		bool end = 2;
		// The time to start receiving events from.
		google.protobuf.Timestamp time = 3;
		// The id of the event to start receiving events from.
		uint64 offset = 5;
	}
}

// Event that was published and sent to a subscriber.
message Event {
	// Identifier of the event, used to acknowledge, reject or ping the event.
	// Can also be used to resume processing of events if using an ephemeral
	// subscriber.
	uint64 id = 1;
	// The subject of this event.
	string subject = 2;
	// Headers of the event.
	Headers headers = 3;
	// Data of the event. The data is dynamic and it is up to the publisher
	// and subscriber to agree on the Protobuf messages to support.
	//
	// Each subject can support several different types of data, which can be
	// useful to support different versions of the data. Subscribers should
	// ignore data they do not understand.
	google.protobuf.Any data = 4;
}

message Headers {
	// Timestamp of the event. This is the time the event occurred, clients
	// may set this when publishing.
	google.protobuf.Timestamp timestamp = 1;
	// Key used to prevent duplicate events from being stored if a retry is
	// needed. Should be set to a unique value for each publish request of a
	// specific event.
	optional string idempotency_key = 2;
	// Parent trace id in the W3C trace context format.
	optional string trace_parent = 3;
	// Trace state in the W3C trace context format.
	optional string trace_state = 4;
}
