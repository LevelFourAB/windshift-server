// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: windshift/events/v1alpha1/service.proto

package eventsv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnsureStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the stream. Will be referenced by subscribers.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Retention policy for the stream.
	RetentionPolicy *EnsureStreamRequest_RetentionPolicy `protobuf:"bytes,2,opt,name=retention_policy,json=retentionPolicy,proto3,oneof" json:"retention_policy,omitempty"`
	// Subjects that the stream will collect events for.
	Subjects []string `protobuf:"bytes,3,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *EnsureStreamRequest) Reset() {
	*x = EnsureStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureStreamRequest) ProtoMessage() {}

func (x *EnsureStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureStreamRequest.ProtoReflect.Descriptor instead.
func (*EnsureStreamRequest) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{0}
}

func (x *EnsureStreamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnsureStreamRequest) GetRetentionPolicy() *EnsureStreamRequest_RetentionPolicy {
	if x != nil {
		return x.RetentionPolicy
	}
	return nil
}

func (x *EnsureStreamRequest) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type EnsureStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnsureStreamResponse) Reset() {
	*x = EnsureStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureStreamResponse) ProtoMessage() {}

func (x *EnsureStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureStreamResponse.ProtoReflect.Descriptor instead.
func (*EnsureStreamResponse) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{1}
}

type EnsureSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The event stream to subscribe to.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The id of the subscription, should be unique to stream if provided.
	// Providing one activates support for resumption and shared processing
	// of events.
	//
	// If not provided, the subscription will be anonymous and will not be
	// able to resume or share processing of events.
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The subjects to subscribe to.
	Subjects []string `protobuf:"bytes,3,rep,name=subjects,proto3" json:"subjects,omitempty"`
	// The pointer to start receiving events from. Used to control how this
	// subscriber will receive old events. If not specified only new events
	// will be received.
	Pointer *EnsureSubscriptionRequest_StreamPointer `protobuf:"bytes,4,opt,name=pointer,proto3,oneof" json:"pointer,omitempty"`
	// The timeout for events, after which they will be resent. If not
	// provided a 30 second timeout will be used.
	//
	// Events will need to be accepted, rejected or pinged before the
	// timeout expires, otherwise they will be marked as failed and queued
	// for delivery again.
	Timeout *durationpb.Duration `protobuf:"bytes,5,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (x *EnsureSubscriptionRequest) Reset() {
	*x = EnsureSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureSubscriptionRequest) ProtoMessage() {}

func (x *EnsureSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*EnsureSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{2}
}

func (x *EnsureSubscriptionRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *EnsureSubscriptionRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EnsureSubscriptionRequest) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *EnsureSubscriptionRequest) GetPointer() *EnsureSubscriptionRequest_StreamPointer {
	if x != nil {
		return x.Pointer
	}
	return nil
}

func (x *EnsureSubscriptionRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type EnsureSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the subscription.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EnsureSubscriptionResponse) Reset() {
	*x = EnsureSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureSubscriptionResponse) ProtoMessage() {}

func (x *EnsureSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*EnsureSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{3}
}

func (x *EnsureSubscriptionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the subscription to delete.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubscriptionRequest) Reset() {
	*x = DeleteSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionRequest) ProtoMessage() {}

func (x *DeleteSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSubscriptionResponse) Reset() {
	*x = DeleteSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionResponse) ProtoMessage() {}

func (x *DeleteSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{5}
}

// Request to publish an event.
type PublishEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The subject of the event.
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// The event to publish.
	Data *anypb.Any `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Timestamp of the event, if not set, the server will use the current time.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Key used to prevent duplicate events from being stored if a retry is
	// needed. Should be set to a unique value for each publish request of a
	// specific event.
	IdempotencyKey *string `protobuf:"bytes,4,opt,name=idempotency_key,json=idempotencyKey,proto3,oneof" json:"idempotency_key,omitempty"`
	// The expected last id of the event subject. If the last id of the event
	// subject is not equal to this value, the publish request will fail.
	ExpectedLastId *uint64 `protobuf:"varint,5,opt,name=expected_last_id,json=expectedLastId,proto3,oneof" json:"expected_last_id,omitempty"`
}

func (x *PublishEventRequest) Reset() {
	*x = PublishEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEventRequest) ProtoMessage() {}

func (x *PublishEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEventRequest.ProtoReflect.Descriptor instead.
func (*PublishEventRequest) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{6}
}

func (x *PublishEventRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *PublishEventRequest) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PublishEventRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PublishEventRequest) GetIdempotencyKey() string {
	if x != nil && x.IdempotencyKey != nil {
		return *x.IdempotencyKey
	}
	return ""
}

func (x *PublishEventRequest) GetExpectedLastId() uint64 {
	if x != nil && x.ExpectedLastId != nil {
		return *x.ExpectedLastId
	}
	return 0
}

// Response to publish an event.
type PublishEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the published event.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PublishEventResponse) Reset() {
	*x = PublishEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEventResponse) ProtoMessage() {}

func (x *PublishEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEventResponse.ProtoReflect.Descriptor instead.
func (*PublishEventResponse) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{7}
}

func (x *PublishEventResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Request to subscribe to events or to accept, reject or ping events.
// The first message sent on the stream must be a Subscribe message, after
// which the client can send Accept, Reject or Ping messages.
//
// Events should be either accepted or rejected, otherwise they will be resent
// after a timeout. If processing takes of an event takes a while pings should
// be sent to indicate that the event is still being processed.
type EventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*EventsRequest_Subscribe_
	//	*EventsRequest_Accept_
	//	*EventsRequest_Reject_
	//	*EventsRequest_Ping_
	Request isEventsRequest_Request `protobuf_oneof:"request"`
}

func (x *EventsRequest) Reset() {
	*x = EventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRequest) ProtoMessage() {}

func (x *EventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsRequest.ProtoReflect.Descriptor instead.
func (*EventsRequest) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{8}
}

func (m *EventsRequest) GetRequest() isEventsRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *EventsRequest) GetSubscribe() *EventsRequest_Subscribe {
	if x, ok := x.GetRequest().(*EventsRequest_Subscribe_); ok {
		return x.Subscribe
	}
	return nil
}

func (x *EventsRequest) GetAccept() *EventsRequest_Accept {
	if x, ok := x.GetRequest().(*EventsRequest_Accept_); ok {
		return x.Accept
	}
	return nil
}

func (x *EventsRequest) GetReject() *EventsRequest_Reject {
	if x, ok := x.GetRequest().(*EventsRequest_Reject_); ok {
		return x.Reject
	}
	return nil
}

func (x *EventsRequest) GetPing() *EventsRequest_Ping {
	if x, ok := x.GetRequest().(*EventsRequest_Ping_); ok {
		return x.Ping
	}
	return nil
}

type isEventsRequest_Request interface {
	isEventsRequest_Request()
}

type EventsRequest_Subscribe_ struct {
	// Subscribe to events, must be sent as the first message in the stream
	// to establish what events to listen to.
	Subscribe *EventsRequest_Subscribe `protobuf:"bytes,1,opt,name=subscribe,proto3,oneof"`
}

type EventsRequest_Accept_ struct {
	// Acknowledge that some events have been successfully processed.
	Accept *EventsRequest_Accept `protobuf:"bytes,2,opt,name=accept,proto3,oneof"`
}

type EventsRequest_Reject_ struct {
	// Acknowledge that some events have failed to be processed.
	Reject *EventsRequest_Reject `protobuf:"bytes,3,opt,name=reject,proto3,oneof"`
}

type EventsRequest_Ping_ struct {
	// Ping events to indicate that they are still being processed.
	Ping *EventsRequest_Ping `protobuf:"bytes,4,opt,name=ping,proto3,oneof"`
}

func (*EventsRequest_Subscribe_) isEventsRequest_Request() {}

func (*EventsRequest_Accept_) isEventsRequest_Request() {}

func (*EventsRequest_Reject_) isEventsRequest_Request() {}

func (*EventsRequest_Ping_) isEventsRequest_Request() {}

type EventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*EventsResponse_Event
	//	*EventsResponse_Subscribed_
	//	*EventsResponse_AcceptConfirmation_
	//	*EventsResponse_RejectConfirmation_
	//	*EventsResponse_PingConfirmation_
	Response isEventsResponse_Response `protobuf_oneof:"response"`
}

func (x *EventsResponse) Reset() {
	*x = EventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsResponse) ProtoMessage() {}

func (x *EventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsResponse.ProtoReflect.Descriptor instead.
func (*EventsResponse) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{9}
}

func (m *EventsResponse) GetResponse() isEventsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *EventsResponse) GetEvent() *Event {
	if x, ok := x.GetResponse().(*EventsResponse_Event); ok {
		return x.Event
	}
	return nil
}

func (x *EventsResponse) GetSubscribed() *EventsResponse_Subscribed {
	if x, ok := x.GetResponse().(*EventsResponse_Subscribed_); ok {
		return x.Subscribed
	}
	return nil
}

func (x *EventsResponse) GetAcceptConfirmation() *EventsResponse_AcceptConfirmation {
	if x, ok := x.GetResponse().(*EventsResponse_AcceptConfirmation_); ok {
		return x.AcceptConfirmation
	}
	return nil
}

func (x *EventsResponse) GetRejectConfirmation() *EventsResponse_RejectConfirmation {
	if x, ok := x.GetResponse().(*EventsResponse_RejectConfirmation_); ok {
		return x.RejectConfirmation
	}
	return nil
}

func (x *EventsResponse) GetPingConfirmation() *EventsResponse_PingConfirmation {
	if x, ok := x.GetResponse().(*EventsResponse_PingConfirmation_); ok {
		return x.PingConfirmation
	}
	return nil
}

type isEventsResponse_Response interface {
	isEventsResponse_Response()
}

type EventsResponse_Event struct {
	// An event that was published.
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

type EventsResponse_Subscribed_ struct {
	// Confirmation that the client has subscribed to events.
	Subscribed *EventsResponse_Subscribed `protobuf:"bytes,2,opt,name=subscribed,proto3,oneof"`
}

type EventsResponse_AcceptConfirmation_ struct {
	// Confirmation that some events were accepted.
	AcceptConfirmation *EventsResponse_AcceptConfirmation `protobuf:"bytes,3,opt,name=accept_confirmation,json=acceptConfirmation,proto3,oneof"`
}

type EventsResponse_RejectConfirmation_ struct {
	// Confirmation that some events were rejected.
	RejectConfirmation *EventsResponse_RejectConfirmation `protobuf:"bytes,4,opt,name=reject_confirmation,json=rejectConfirmation,proto3,oneof"`
}

type EventsResponse_PingConfirmation_ struct {
	// Confirmation that a ping was received.
	PingConfirmation *EventsResponse_PingConfirmation `protobuf:"bytes,5,opt,name=ping_confirmation,json=pingConfirmation,proto3,oneof"`
}

func (*EventsResponse_Event) isEventsResponse_Response() {}

func (*EventsResponse_Subscribed_) isEventsResponse_Response() {}

func (*EventsResponse_AcceptConfirmation_) isEventsResponse_Response() {}

func (*EventsResponse_RejectConfirmation_) isEventsResponse_Response() {}

func (*EventsResponse_PingConfirmation_) isEventsResponse_Response() {}

// An event that was published.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the event, used to accept, reject or ping the event. Can
	// also be used to resume processing of events if using an ephemeral
	// subscriber.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// When the event was published.
	PublishTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	// Data of the event.
	Data *anypb.Any `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{10}
}

func (x *Event) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Event) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *Event) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type EnsureStreamRequest_RetentionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum age of events in the stream. Events older than this will be
	// deleted.
	MaxAge *durationpb.Duration `protobuf:"bytes,1,opt,name=max_age,json=maxAge,proto3,oneof" json:"max_age,omitempty"`
	// Maximum number of events in the stream. Events beyond this limit will
	// be deleted.
	MaxMessages *uint64 `protobuf:"varint,2,opt,name=max_messages,json=maxMessages,proto3,oneof" json:"max_messages,omitempty"`
	// Maximum size of events in the stream. Events beyond this limit will
	// be deleted.
	MaxBytes *uint64 `protobuf:"varint,3,opt,name=max_bytes,json=maxBytes,proto3,oneof" json:"max_bytes,omitempty"`
}

func (x *EnsureStreamRequest_RetentionPolicy) Reset() {
	*x = EnsureStreamRequest_RetentionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureStreamRequest_RetentionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureStreamRequest_RetentionPolicy) ProtoMessage() {}

func (x *EnsureStreamRequest_RetentionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureStreamRequest_RetentionPolicy.ProtoReflect.Descriptor instead.
func (*EnsureStreamRequest_RetentionPolicy) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EnsureStreamRequest_RetentionPolicy) GetMaxAge() *durationpb.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *EnsureStreamRequest_RetentionPolicy) GetMaxMessages() uint64 {
	if x != nil && x.MaxMessages != nil {
		return *x.MaxMessages
	}
	return 0
}

func (x *EnsureStreamRequest_RetentionPolicy) GetMaxBytes() uint64 {
	if x != nil && x.MaxBytes != nil {
		return *x.MaxBytes
	}
	return 0
}

// A pointer to start receiving events from.
type EnsureSubscriptionRequest_StreamPointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Pointer:
	//
	//	*EnsureSubscriptionRequest_StreamPointer_Start
	//	*EnsureSubscriptionRequest_StreamPointer_End
	//	*EnsureSubscriptionRequest_StreamPointer_Time
	//	*EnsureSubscriptionRequest_StreamPointer_Id
	Pointer isEnsureSubscriptionRequest_StreamPointer_Pointer `protobuf_oneof:"pointer"`
}

func (x *EnsureSubscriptionRequest_StreamPointer) Reset() {
	*x = EnsureSubscriptionRequest_StreamPointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureSubscriptionRequest_StreamPointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureSubscriptionRequest_StreamPointer) ProtoMessage() {}

func (x *EnsureSubscriptionRequest_StreamPointer) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureSubscriptionRequest_StreamPointer.ProtoReflect.Descriptor instead.
func (*EnsureSubscriptionRequest_StreamPointer) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{2, 0}
}

func (m *EnsureSubscriptionRequest_StreamPointer) GetPointer() isEnsureSubscriptionRequest_StreamPointer_Pointer {
	if m != nil {
		return m.Pointer
	}
	return nil
}

func (x *EnsureSubscriptionRequest_StreamPointer) GetStart() bool {
	if x, ok := x.GetPointer().(*EnsureSubscriptionRequest_StreamPointer_Start); ok {
		return x.Start
	}
	return false
}

func (x *EnsureSubscriptionRequest_StreamPointer) GetEnd() bool {
	if x, ok := x.GetPointer().(*EnsureSubscriptionRequest_StreamPointer_End); ok {
		return x.End
	}
	return false
}

func (x *EnsureSubscriptionRequest_StreamPointer) GetTime() *timestamppb.Timestamp {
	if x, ok := x.GetPointer().(*EnsureSubscriptionRequest_StreamPointer_Time); ok {
		return x.Time
	}
	return nil
}

func (x *EnsureSubscriptionRequest_StreamPointer) GetId() uint64 {
	if x, ok := x.GetPointer().(*EnsureSubscriptionRequest_StreamPointer_Id); ok {
		return x.Id
	}
	return 0
}

type isEnsureSubscriptionRequest_StreamPointer_Pointer interface {
	isEnsureSubscriptionRequest_StreamPointer_Pointer()
}

type EnsureSubscriptionRequest_StreamPointer_Start struct {
	// Receive all events currently available.
	Start bool `protobuf:"varint,1,opt,name=start,proto3,oneof"`
}

type EnsureSubscriptionRequest_StreamPointer_End struct {
	// Receive only future events.
	End bool `protobuf:"varint,2,opt,name=end,proto3,oneof"`
}

type EnsureSubscriptionRequest_StreamPointer_Time struct {
	// The time to start receiving events from.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3,oneof"`
}

type EnsureSubscriptionRequest_StreamPointer_Id struct {
	// The id of the event to start receiving events from.
	Id uint64 `protobuf:"varint,5,opt,name=id,proto3,oneof"`
}

func (*EnsureSubscriptionRequest_StreamPointer_Start) isEnsureSubscriptionRequest_StreamPointer_Pointer() {
}

func (*EnsureSubscriptionRequest_StreamPointer_End) isEnsureSubscriptionRequest_StreamPointer_Pointer() {
}

func (*EnsureSubscriptionRequest_StreamPointer_Time) isEnsureSubscriptionRequest_StreamPointer_Pointer() {
}

func (*EnsureSubscriptionRequest_StreamPointer_Id) isEnsureSubscriptionRequest_StreamPointer_Pointer() {
}

// Subscribe to events, must be sent as the first message in the stream.
type EventsRequest_Subscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the stream to subscribe to.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The id of the subscriber, should be an id previously created using
	// EnsureSubscription.
	SubscriberId string `protobuf:"bytes,2,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	// Concurrency is used to set an approximate number of events that can
	// be processed at the same time.
	Concurrency *uint64 `protobuf:"varint,3,opt,name=concurrency,proto3,oneof" json:"concurrency,omitempty"`
	// Control if the stream will automatically close when all events have
	// been received. Setting this will check what the latest event is at
	// the time of subscribing and close the stream when that event has
	// been received.
	AutoClose *bool `protobuf:"varint,4,opt,name=auto_close,json=autoClose,proto3,oneof" json:"auto_close,omitempty"`
}

func (x *EventsRequest_Subscribe) Reset() {
	*x = EventsRequest_Subscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsRequest_Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRequest_Subscribe) ProtoMessage() {}

func (x *EventsRequest_Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsRequest_Subscribe.ProtoReflect.Descriptor instead.
func (*EventsRequest_Subscribe) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *EventsRequest_Subscribe) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *EventsRequest_Subscribe) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *EventsRequest_Subscribe) GetConcurrency() uint64 {
	if x != nil && x.Concurrency != nil {
		return *x.Concurrency
	}
	return 0
}

func (x *EventsRequest_Subscribe) GetAutoClose() bool {
	if x != nil && x.AutoClose != nil {
		return *x.AutoClose
	}
	return false
}

// Accept indicates that some events have been successfully processed.
type EventsRequest_Accept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers to accept.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *EventsRequest_Accept) Reset() {
	*x = EventsRequest_Accept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsRequest_Accept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRequest_Accept) ProtoMessage() {}

func (x *EventsRequest_Accept) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsRequest_Accept.ProtoReflect.Descriptor instead.
func (*EventsRequest_Accept) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{8, 1}
}

func (x *EventsRequest_Accept) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Reject indicates that some events have failed to be processed.
type EventsRequest_Reject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers to reject.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// Whether to retry the events or not.
	Retry bool `protobuf:"varint,2,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *EventsRequest_Reject) Reset() {
	*x = EventsRequest_Reject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsRequest_Reject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRequest_Reject) ProtoMessage() {}

func (x *EventsRequest_Reject) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsRequest_Reject.ProtoReflect.Descriptor instead.
func (*EventsRequest_Reject) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{8, 2}
}

func (x *EventsRequest_Reject) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *EventsRequest_Reject) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

// Ping events to indicate that they are still being processed.
type EventsRequest_Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers of the events that are currently being processed.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *EventsRequest_Ping) Reset() {
	*x = EventsRequest_Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsRequest_Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRequest_Ping) ProtoMessage() {}

func (x *EventsRequest_Ping) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsRequest_Ping.ProtoReflect.Descriptor instead.
func (*EventsRequest_Ping) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{8, 3}
}

func (x *EventsRequest_Ping) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Confirmation that the client has subscribed to events.
type EventsResponse_Subscribed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventsResponse_Subscribed) Reset() {
	*x = EventsResponse_Subscribed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsResponse_Subscribed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsResponse_Subscribed) ProtoMessage() {}

func (x *EventsResponse_Subscribed) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsResponse_Subscribed.ProtoReflect.Descriptor instead.
func (*EventsResponse_Subscribed) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{9, 0}
}

// Confirmation that some events were accepted.
type EventsResponse_AcceptConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers that were accepted.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *EventsResponse_AcceptConfirmation) Reset() {
	*x = EventsResponse_AcceptConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsResponse_AcceptConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsResponse_AcceptConfirmation) ProtoMessage() {}

func (x *EventsResponse_AcceptConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsResponse_AcceptConfirmation.ProtoReflect.Descriptor instead.
func (*EventsResponse_AcceptConfirmation) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{9, 1}
}

func (x *EventsResponse_AcceptConfirmation) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Confirmation that some events were rejected.
type EventsResponse_RejectConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers that were rejected.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *EventsResponse_RejectConfirmation) Reset() {
	*x = EventsResponse_RejectConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsResponse_RejectConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsResponse_RejectConfirmation) ProtoMessage() {}

func (x *EventsResponse_RejectConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsResponse_RejectConfirmation.ProtoReflect.Descriptor instead.
func (*EventsResponse_RejectConfirmation) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{9, 2}
}

func (x *EventsResponse_RejectConfirmation) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Confirmation that a ping was received.
type EventsResponse_PingConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers of the events that are currently being processed.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *EventsResponse_PingConfirmation) Reset() {
	*x = EventsResponse_PingConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsResponse_PingConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsResponse_PingConfirmation) ProtoMessage() {}

func (x *EventsResponse_PingConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsResponse_PingConfirmation.ProtoReflect.Descriptor instead.
func (*EventsResponse_PingConfirmation) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{9, 3}
}

func (x *EventsResponse_PingConfirmation) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_windshift_events_v1alpha1_service_proto protoreflect.FileDescriptor

var file_windshift_events_v1alpha1_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x77, 0x69, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8c, 0x03, 0x0a, 0x13, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x10,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0xbf, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x16, 0x0a, 0x14, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x03, 0x0a, 0x19, 0x45, 0x6e, 0x73, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x61, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x8a, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x2c, 0x0a,
	0x1a, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x69, 0x64,
	0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe6, 0x04,
	0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x49,
	0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xb2,
	0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x1a, 0x1a, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a,
	0x30, 0x0a, 0x06, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x1a, 0x18, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xff, 0x04, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x13, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x13,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x77, 0x69, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a,
	0x11, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x1a, 0x26, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x26,
	0x0a, 0x12, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x24, 0x0a, 0x10, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xe0, 0x04, 0x0a, 0x0d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a,
	0x0c, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2e, 0x2e,
	0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81,
	0x01, 0x0a, 0x12, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x77, 0x69,
	0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x77, 0x69, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x06, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0xfe,
	0x01, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x49, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x57, 0x45,
	0x58, 0xaa, 0x02, 0x19, 0x57, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x19,
	0x57, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x25, 0x57, 0x69, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x1b, 0x57, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x3a, 0x3a, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_windshift_events_v1alpha1_service_proto_rawDescOnce sync.Once
	file_windshift_events_v1alpha1_service_proto_rawDescData = file_windshift_events_v1alpha1_service_proto_rawDesc
)

func file_windshift_events_v1alpha1_service_proto_rawDescGZIP() []byte {
	file_windshift_events_v1alpha1_service_proto_rawDescOnce.Do(func() {
		file_windshift_events_v1alpha1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_windshift_events_v1alpha1_service_proto_rawDescData)
	})
	return file_windshift_events_v1alpha1_service_proto_rawDescData
}

var file_windshift_events_v1alpha1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_windshift_events_v1alpha1_service_proto_goTypes = []interface{}{
	(*EnsureStreamRequest)(nil),                     // 0: windshift.events.v1alpha1.EnsureStreamRequest
	(*EnsureStreamResponse)(nil),                    // 1: windshift.events.v1alpha1.EnsureStreamResponse
	(*EnsureSubscriptionRequest)(nil),               // 2: windshift.events.v1alpha1.EnsureSubscriptionRequest
	(*EnsureSubscriptionResponse)(nil),              // 3: windshift.events.v1alpha1.EnsureSubscriptionResponse
	(*DeleteSubscriptionRequest)(nil),               // 4: windshift.events.v1alpha1.DeleteSubscriptionRequest
	(*DeleteSubscriptionResponse)(nil),              // 5: windshift.events.v1alpha1.DeleteSubscriptionResponse
	(*PublishEventRequest)(nil),                     // 6: windshift.events.v1alpha1.PublishEventRequest
	(*PublishEventResponse)(nil),                    // 7: windshift.events.v1alpha1.PublishEventResponse
	(*EventsRequest)(nil),                           // 8: windshift.events.v1alpha1.EventsRequest
	(*EventsResponse)(nil),                          // 9: windshift.events.v1alpha1.EventsResponse
	(*Event)(nil),                                   // 10: windshift.events.v1alpha1.Event
	(*EnsureStreamRequest_RetentionPolicy)(nil),     // 11: windshift.events.v1alpha1.EnsureStreamRequest.RetentionPolicy
	(*EnsureSubscriptionRequest_StreamPointer)(nil), // 12: windshift.events.v1alpha1.EnsureSubscriptionRequest.StreamPointer
	(*EventsRequest_Subscribe)(nil),                 // 13: windshift.events.v1alpha1.EventsRequest.Subscribe
	(*EventsRequest_Accept)(nil),                    // 14: windshift.events.v1alpha1.EventsRequest.Accept
	(*EventsRequest_Reject)(nil),                    // 15: windshift.events.v1alpha1.EventsRequest.Reject
	(*EventsRequest_Ping)(nil),                      // 16: windshift.events.v1alpha1.EventsRequest.Ping
	(*EventsResponse_Subscribed)(nil),               // 17: windshift.events.v1alpha1.EventsResponse.Subscribed
	(*EventsResponse_AcceptConfirmation)(nil),       // 18: windshift.events.v1alpha1.EventsResponse.AcceptConfirmation
	(*EventsResponse_RejectConfirmation)(nil),       // 19: windshift.events.v1alpha1.EventsResponse.RejectConfirmation
	(*EventsResponse_PingConfirmation)(nil),         // 20: windshift.events.v1alpha1.EventsResponse.PingConfirmation
	(*durationpb.Duration)(nil),                     // 21: google.protobuf.Duration
	(*anypb.Any)(nil),                               // 22: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),                   // 23: google.protobuf.Timestamp
}
var file_windshift_events_v1alpha1_service_proto_depIdxs = []int32{
	11, // 0: windshift.events.v1alpha1.EnsureStreamRequest.retention_policy:type_name -> windshift.events.v1alpha1.EnsureStreamRequest.RetentionPolicy
	12, // 1: windshift.events.v1alpha1.EnsureSubscriptionRequest.pointer:type_name -> windshift.events.v1alpha1.EnsureSubscriptionRequest.StreamPointer
	21, // 2: windshift.events.v1alpha1.EnsureSubscriptionRequest.timeout:type_name -> google.protobuf.Duration
	22, // 3: windshift.events.v1alpha1.PublishEventRequest.data:type_name -> google.protobuf.Any
	23, // 4: windshift.events.v1alpha1.PublishEventRequest.timestamp:type_name -> google.protobuf.Timestamp
	13, // 5: windshift.events.v1alpha1.EventsRequest.subscribe:type_name -> windshift.events.v1alpha1.EventsRequest.Subscribe
	14, // 6: windshift.events.v1alpha1.EventsRequest.accept:type_name -> windshift.events.v1alpha1.EventsRequest.Accept
	15, // 7: windshift.events.v1alpha1.EventsRequest.reject:type_name -> windshift.events.v1alpha1.EventsRequest.Reject
	16, // 8: windshift.events.v1alpha1.EventsRequest.ping:type_name -> windshift.events.v1alpha1.EventsRequest.Ping
	10, // 9: windshift.events.v1alpha1.EventsResponse.event:type_name -> windshift.events.v1alpha1.Event
	17, // 10: windshift.events.v1alpha1.EventsResponse.subscribed:type_name -> windshift.events.v1alpha1.EventsResponse.Subscribed
	18, // 11: windshift.events.v1alpha1.EventsResponse.accept_confirmation:type_name -> windshift.events.v1alpha1.EventsResponse.AcceptConfirmation
	19, // 12: windshift.events.v1alpha1.EventsResponse.reject_confirmation:type_name -> windshift.events.v1alpha1.EventsResponse.RejectConfirmation
	20, // 13: windshift.events.v1alpha1.EventsResponse.ping_confirmation:type_name -> windshift.events.v1alpha1.EventsResponse.PingConfirmation
	23, // 14: windshift.events.v1alpha1.Event.publish_time:type_name -> google.protobuf.Timestamp
	22, // 15: windshift.events.v1alpha1.Event.data:type_name -> google.protobuf.Any
	21, // 16: windshift.events.v1alpha1.EnsureStreamRequest.RetentionPolicy.max_age:type_name -> google.protobuf.Duration
	23, // 17: windshift.events.v1alpha1.EnsureSubscriptionRequest.StreamPointer.time:type_name -> google.protobuf.Timestamp
	0,  // 18: windshift.events.v1alpha1.EventsService.EnsureStream:input_type -> windshift.events.v1alpha1.EnsureStreamRequest
	2,  // 19: windshift.events.v1alpha1.EventsService.EnsureSubscription:input_type -> windshift.events.v1alpha1.EnsureSubscriptionRequest
	4,  // 20: windshift.events.v1alpha1.EventsService.DeleteSubscription:input_type -> windshift.events.v1alpha1.DeleteSubscriptionRequest
	6,  // 21: windshift.events.v1alpha1.EventsService.PublishEvent:input_type -> windshift.events.v1alpha1.PublishEventRequest
	8,  // 22: windshift.events.v1alpha1.EventsService.Events:input_type -> windshift.events.v1alpha1.EventsRequest
	1,  // 23: windshift.events.v1alpha1.EventsService.EnsureStream:output_type -> windshift.events.v1alpha1.EnsureStreamResponse
	3,  // 24: windshift.events.v1alpha1.EventsService.EnsureSubscription:output_type -> windshift.events.v1alpha1.EnsureSubscriptionResponse
	5,  // 25: windshift.events.v1alpha1.EventsService.DeleteSubscription:output_type -> windshift.events.v1alpha1.DeleteSubscriptionResponse
	7,  // 26: windshift.events.v1alpha1.EventsService.PublishEvent:output_type -> windshift.events.v1alpha1.PublishEventResponse
	9,  // 27: windshift.events.v1alpha1.EventsService.Events:output_type -> windshift.events.v1alpha1.EventsResponse
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_windshift_events_v1alpha1_service_proto_init() }
func file_windshift_events_v1alpha1_service_proto_init() {
	if File_windshift_events_v1alpha1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_windshift_events_v1alpha1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureStreamRequest_RetentionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureSubscriptionRequest_StreamPointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsRequest_Subscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsRequest_Accept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsRequest_Reject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsRequest_Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsResponse_Subscribed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsResponse_AcceptConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsResponse_RejectConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsResponse_PingConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_windshift_events_v1alpha1_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_windshift_events_v1alpha1_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_windshift_events_v1alpha1_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_windshift_events_v1alpha1_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*EventsRequest_Subscribe_)(nil),
		(*EventsRequest_Accept_)(nil),
		(*EventsRequest_Reject_)(nil),
		(*EventsRequest_Ping_)(nil),
	}
	file_windshift_events_v1alpha1_service_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*EventsResponse_Event)(nil),
		(*EventsResponse_Subscribed_)(nil),
		(*EventsResponse_AcceptConfirmation_)(nil),
		(*EventsResponse_RejectConfirmation_)(nil),
		(*EventsResponse_PingConfirmation_)(nil),
	}
	file_windshift_events_v1alpha1_service_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_windshift_events_v1alpha1_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*EnsureSubscriptionRequest_StreamPointer_Start)(nil),
		(*EnsureSubscriptionRequest_StreamPointer_End)(nil),
		(*EnsureSubscriptionRequest_StreamPointer_Time)(nil),
		(*EnsureSubscriptionRequest_StreamPointer_Id)(nil),
	}
	file_windshift_events_v1alpha1_service_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_windshift_events_v1alpha1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_windshift_events_v1alpha1_service_proto_goTypes,
		DependencyIndexes: file_windshift_events_v1alpha1_service_proto_depIdxs,
		MessageInfos:      file_windshift_events_v1alpha1_service_proto_msgTypes,
	}.Build()
	File_windshift_events_v1alpha1_service_proto = out.File
	file_windshift_events_v1alpha1_service_proto_rawDesc = nil
	file_windshift_events_v1alpha1_service_proto_goTypes = nil
	file_windshift_events_v1alpha1_service_proto_depIdxs = nil
}
