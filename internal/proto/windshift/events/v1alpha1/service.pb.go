// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: windshift/events/v1alpha1/service.proto

package eventsv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Policy to use when discarding events when the stream is full.
type EnsureStreamRequest_DiscardPolicy int32

const (
	EnsureStreamRequest_DISCARD_POLICY_UNSPECIFIED EnsureStreamRequest_DiscardPolicy = 0
	// Discard old events when the stream is full.
	EnsureStreamRequest_DISCARD_POLICY_OLD EnsureStreamRequest_DiscardPolicy = 1
	// Discard new events when the stream is full.
	EnsureStreamRequest_DISCARD_POLICY_NEW EnsureStreamRequest_DiscardPolicy = 2
)

// Enum value maps for EnsureStreamRequest_DiscardPolicy.
var (
	EnsureStreamRequest_DiscardPolicy_name = map[int32]string{
		0: "DISCARD_POLICY_UNSPECIFIED",
		1: "DISCARD_POLICY_OLD",
		2: "DISCARD_POLICY_NEW",
	}
	EnsureStreamRequest_DiscardPolicy_value = map[string]int32{
		"DISCARD_POLICY_UNSPECIFIED": 0,
		"DISCARD_POLICY_OLD":         1,
		"DISCARD_POLICY_NEW":         2,
	}
)

func (x EnsureStreamRequest_DiscardPolicy) Enum() *EnsureStreamRequest_DiscardPolicy {
	p := new(EnsureStreamRequest_DiscardPolicy)
	*p = x
	return p
}

func (x EnsureStreamRequest_DiscardPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnsureStreamRequest_DiscardPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_windshift_events_v1alpha1_service_proto_enumTypes[0].Descriptor()
}

func (EnsureStreamRequest_DiscardPolicy) Type() protoreflect.EnumType {
	return &file_windshift_events_v1alpha1_service_proto_enumTypes[0]
}

func (x EnsureStreamRequest_DiscardPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnsureStreamRequest_DiscardPolicy.Descriptor instead.
func (EnsureStreamRequest_DiscardPolicy) EnumDescriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{0, 0}
}

// Type of storage to use for the stream.
type EnsureStreamRequest_StorageType int32

const (
	// Unspecified storage type, will default to file based storage.
	EnsureStreamRequest_STORAGE_TYPE_UNSPECIFIED EnsureStreamRequest_StorageType = 0
	// Use a file based storage.
	EnsureStreamRequest_STORAGE_TYPE_FILE EnsureStreamRequest_StorageType = 1
	// Use a memory based storage.
	EnsureStreamRequest_STORAGE_TYPE_MEMORY EnsureStreamRequest_StorageType = 2
)

// Enum value maps for EnsureStreamRequest_StorageType.
var (
	EnsureStreamRequest_StorageType_name = map[int32]string{
		0: "STORAGE_TYPE_UNSPECIFIED",
		1: "STORAGE_TYPE_FILE",
		2: "STORAGE_TYPE_MEMORY",
	}
	EnsureStreamRequest_StorageType_value = map[string]int32{
		"STORAGE_TYPE_UNSPECIFIED": 0,
		"STORAGE_TYPE_FILE":        1,
		"STORAGE_TYPE_MEMORY":      2,
	}
)

func (x EnsureStreamRequest_StorageType) Enum() *EnsureStreamRequest_StorageType {
	p := new(EnsureStreamRequest_StorageType)
	*p = x
	return p
}

func (x EnsureStreamRequest_StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnsureStreamRequest_StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_windshift_events_v1alpha1_service_proto_enumTypes[1].Descriptor()
}

func (EnsureStreamRequest_StorageType) Type() protoreflect.EnumType {
	return &file_windshift_events_v1alpha1_service_proto_enumTypes[1]
}

func (x EnsureStreamRequest_StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnsureStreamRequest_StorageType.Descriptor instead.
func (EnsureStreamRequest_StorageType) EnumDescriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{0, 1}
}

type EnsureStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the stream. Will be referenced by consumers and subscribers.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Retention policy for the stream.
	RetentionPolicy *EnsureStreamRequest_RetentionPolicy `protobuf:"bytes,2,opt,name=retention_policy,json=retentionPolicy,proto3,oneof" json:"retention_policy,omitempty"`
	// Source of events for the stream.
	//
	// Types that are assignable to Source:
	//
	//	*EnsureStreamRequest_Subjects_
	//	*EnsureStreamRequest_Mirror
	//	*EnsureStreamRequest_Aggregate
	Source isEnsureStreamRequest_Source `protobuf_oneof:"source"`
	// Configuration for how the stream should be stored.
	Storage *EnsureStreamRequest_Storage `protobuf:"bytes,6,opt,name=storage,proto3,oneof" json:"storage,omitempty"`
	// The amount of time duplicate detection should be enabled for. This is
	// how long an idempotency key will be stored and checked for.
	DeduplicationWindow *durationpb.Duration `protobuf:"bytes,7,opt,name=deduplication_window,json=deduplicationWindow,proto3,oneof" json:"deduplication_window,omitempty"`
	// The maximum size of an event in bytes. If not provided, will default to
	// 1MB.
	MaxEventSize *uint32 `protobuf:"varint,8,opt,name=max_event_size,json=maxEventSize,proto3,oneof" json:"max_event_size,omitempty"`
}

func (x *EnsureStreamRequest) Reset() {
	*x = EnsureStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureStreamRequest) ProtoMessage() {}

func (x *EnsureStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureStreamRequest.ProtoReflect.Descriptor instead.
func (*EnsureStreamRequest) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{0}
}

func (x *EnsureStreamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnsureStreamRequest) GetRetentionPolicy() *EnsureStreamRequest_RetentionPolicy {
	if x != nil {
		return x.RetentionPolicy
	}
	return nil
}

func (m *EnsureStreamRequest) GetSource() isEnsureStreamRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *EnsureStreamRequest) GetSubjects() *EnsureStreamRequest_Subjects {
	if x, ok := x.GetSource().(*EnsureStreamRequest_Subjects_); ok {
		return x.Subjects
	}
	return nil
}

func (x *EnsureStreamRequest) GetMirror() *EnsureStreamRequest_StreamSource {
	if x, ok := x.GetSource().(*EnsureStreamRequest_Mirror); ok {
		return x.Mirror
	}
	return nil
}

func (x *EnsureStreamRequest) GetAggregate() *EnsureStreamRequest_StreamSources {
	if x, ok := x.GetSource().(*EnsureStreamRequest_Aggregate); ok {
		return x.Aggregate
	}
	return nil
}

func (x *EnsureStreamRequest) GetStorage() *EnsureStreamRequest_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *EnsureStreamRequest) GetDeduplicationWindow() *durationpb.Duration {
	if x != nil {
		return x.DeduplicationWindow
	}
	return nil
}

func (x *EnsureStreamRequest) GetMaxEventSize() uint32 {
	if x != nil && x.MaxEventSize != nil {
		return *x.MaxEventSize
	}
	return 0
}

type isEnsureStreamRequest_Source interface {
	isEnsureStreamRequest_Source()
}

type EnsureStreamRequest_Subjects_ struct {
	// Subjects to collect events for.
	Subjects *EnsureStreamRequest_Subjects `protobuf:"bytes,3,opt,name=subjects,proto3,oneof"`
}

type EnsureStreamRequest_Mirror struct {
	// Stream to mirror. If set can not be changed.
	Mirror *EnsureStreamRequest_StreamSource `protobuf:"bytes,4,opt,name=mirror,proto3,oneof"`
}

type EnsureStreamRequest_Aggregate struct {
	// Streams to receive events from.
	Aggregate *EnsureStreamRequest_StreamSources `protobuf:"bytes,5,opt,name=aggregate,proto3,oneof"`
}

func (*EnsureStreamRequest_Subjects_) isEnsureStreamRequest_Source() {}

func (*EnsureStreamRequest_Mirror) isEnsureStreamRequest_Source() {}

func (*EnsureStreamRequest_Aggregate) isEnsureStreamRequest_Source() {}

type EnsureStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnsureStreamResponse) Reset() {
	*x = EnsureStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureStreamResponse) ProtoMessage() {}

func (x *EnsureStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureStreamResponse.ProtoReflect.Descriptor instead.
func (*EnsureStreamResponse) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{1}
}

type EnsureConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The event stream to consume events from.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The id of the consumer, should be unique to stream if provided,
	// providing one creates a durable consumer activates support for
	// resumption and shared processing of events.
	//
	// If not provided, the consumer will be ephemeral and will not be
	// able to resume or share processing of events.
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The subjects to subscribe to.
	Subjects []string `protobuf:"bytes,3,rep,name=subjects,proto3" json:"subjects,omitempty"`
	// The pointer to start receiving events from. Used to control how this
	// subscriber will receive old events. If not specified only new events
	// will be received.
	Pointer *StreamPointer `protobuf:"bytes,4,opt,name=pointer,proto3,oneof" json:"pointer,omitempty"`
	// The timeout for events, after which they will be resent. If not
	// provided a 30 second timeout will be used.
	//
	// Events will need to be acknowledged, rejected or pinged before the
	// timeout expires, otherwise they will be marked as failed and queued
	// for delivery again.
	ProcessingTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=processing_timeout,json=processingTimeout,proto3,oneof" json:"processing_timeout,omitempty"`
}

func (x *EnsureConsumerRequest) Reset() {
	*x = EnsureConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureConsumerRequest) ProtoMessage() {}

func (x *EnsureConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureConsumerRequest.ProtoReflect.Descriptor instead.
func (*EnsureConsumerRequest) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{2}
}

func (x *EnsureConsumerRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *EnsureConsumerRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EnsureConsumerRequest) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *EnsureConsumerRequest) GetPointer() *StreamPointer {
	if x != nil {
		return x.Pointer
	}
	return nil
}

func (x *EnsureConsumerRequest) GetProcessingTimeout() *durationpb.Duration {
	if x != nil {
		return x.ProcessingTimeout
	}
	return nil
}

type EnsureConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the subscription.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EnsureConsumerResponse) Reset() {
	*x = EnsureConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureConsumerResponse) ProtoMessage() {}

func (x *EnsureConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureConsumerResponse.ProtoReflect.Descriptor instead.
func (*EnsureConsumerResponse) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{3}
}

func (x *EnsureConsumerResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The event stream to delete the consumer from.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The id of the consumer to delete.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteConsumerRequest) Reset() {
	*x = DeleteConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConsumerRequest) ProtoMessage() {}

func (x *DeleteConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConsumerRequest.ProtoReflect.Descriptor instead.
func (*DeleteConsumerRequest) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteConsumerRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *DeleteConsumerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteConsumerResponse) Reset() {
	*x = DeleteConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConsumerResponse) ProtoMessage() {}

func (x *DeleteConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConsumerResponse.ProtoReflect.Descriptor instead.
func (*DeleteConsumerResponse) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{5}
}

// Request to publish an event.
type PublishEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The subject of the event.
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// The event to publish.
	Data *anypb.Any `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Timestamp of the event, if not set, the server will use the current time.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Key used to prevent duplicate events from being stored if a retry is
	// needed. Should be set to a unique value for each publish request of a
	// specific event.
	IdempotencyKey *string `protobuf:"bytes,4,opt,name=idempotency_key,json=idempotencyKey,proto3,oneof" json:"idempotency_key,omitempty"`
	// The id of the last event that was published to the stream. Used for
	// optimistic concurrency control, if the last event id does not match
	// the current last event id, the publish will fail.
	ExpectedLastId *uint64 `protobuf:"varint,5,opt,name=expected_last_id,json=expectedLastId,proto3,oneof" json:"expected_last_id,omitempty"`
}

func (x *PublishEventRequest) Reset() {
	*x = PublishEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEventRequest) ProtoMessage() {}

func (x *PublishEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEventRequest.ProtoReflect.Descriptor instead.
func (*PublishEventRequest) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{6}
}

func (x *PublishEventRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *PublishEventRequest) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PublishEventRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PublishEventRequest) GetIdempotencyKey() string {
	if x != nil && x.IdempotencyKey != nil {
		return *x.IdempotencyKey
	}
	return ""
}

func (x *PublishEventRequest) GetExpectedLastId() uint64 {
	if x != nil && x.ExpectedLastId != nil {
		return *x.ExpectedLastId
	}
	return 0
}

// Response to publish an event.
type PublishEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the published event.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PublishEventResponse) Reset() {
	*x = PublishEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEventResponse) ProtoMessage() {}

func (x *PublishEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEventResponse.ProtoReflect.Descriptor instead.
func (*PublishEventResponse) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{7}
}

func (x *PublishEventResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Request to subscribe to events or to acknowledge, reject or ping events.
// The first message sent on the stream must be a Subscribe message, after
// which the client can send Ack, Reject or Ping messages.
//
// Events should be either acknowledge or rejected, otherwise they will be
// resent after a timeout. If processing takes of an event takes a while pings
// should be sent to indicate that the event is still being processed.
type ConsumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*ConsumeRequest_Subscribe_
	//	*ConsumeRequest_Ack_
	//	*ConsumeRequest_Reject_
	//	*ConsumeRequest_Ping_
	Request isConsumeRequest_Request `protobuf_oneof:"request"`
}

func (x *ConsumeRequest) Reset() {
	*x = ConsumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeRequest) ProtoMessage() {}

func (x *ConsumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeRequest.ProtoReflect.Descriptor instead.
func (*ConsumeRequest) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{8}
}

func (m *ConsumeRequest) GetRequest() isConsumeRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ConsumeRequest) GetSubscribe() *ConsumeRequest_Subscribe {
	if x, ok := x.GetRequest().(*ConsumeRequest_Subscribe_); ok {
		return x.Subscribe
	}
	return nil
}

func (x *ConsumeRequest) GetAck() *ConsumeRequest_Ack {
	if x, ok := x.GetRequest().(*ConsumeRequest_Ack_); ok {
		return x.Ack
	}
	return nil
}

func (x *ConsumeRequest) GetReject() *ConsumeRequest_Reject {
	if x, ok := x.GetRequest().(*ConsumeRequest_Reject_); ok {
		return x.Reject
	}
	return nil
}

func (x *ConsumeRequest) GetPing() *ConsumeRequest_Ping {
	if x, ok := x.GetRequest().(*ConsumeRequest_Ping_); ok {
		return x.Ping
	}
	return nil
}

type isConsumeRequest_Request interface {
	isConsumeRequest_Request()
}

type ConsumeRequest_Subscribe_ struct {
	// Subscribe to events, must be sent as the first message in the stream
	// to establish what events to listen to.
	Subscribe *ConsumeRequest_Subscribe `protobuf:"bytes,1,opt,name=subscribe,proto3,oneof"`
}

type ConsumeRequest_Ack_ struct {
	// Acknowledge that some events have been successfully processed.
	Ack *ConsumeRequest_Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

type ConsumeRequest_Reject_ struct {
	// Acknowledge that some events have failed to be processed.
	Reject *ConsumeRequest_Reject `protobuf:"bytes,3,opt,name=reject,proto3,oneof"`
}

type ConsumeRequest_Ping_ struct {
	// Ping events to indicate that they are still being processed.
	Ping *ConsumeRequest_Ping `protobuf:"bytes,4,opt,name=ping,proto3,oneof"`
}

func (*ConsumeRequest_Subscribe_) isConsumeRequest_Request() {}

func (*ConsumeRequest_Ack_) isConsumeRequest_Request() {}

func (*ConsumeRequest_Reject_) isConsumeRequest_Request() {}

func (*ConsumeRequest_Ping_) isConsumeRequest_Request() {}

type ConsumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ConsumeResponse_Event
	//	*ConsumeResponse_Subscribed_
	//	*ConsumeResponse_AckConfirmation_
	//	*ConsumeResponse_RejectConfirmation_
	//	*ConsumeResponse_PingConfirmation_
	Response isConsumeResponse_Response `protobuf_oneof:"response"`
}

func (x *ConsumeResponse) Reset() {
	*x = ConsumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeResponse) ProtoMessage() {}

func (x *ConsumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeResponse.ProtoReflect.Descriptor instead.
func (*ConsumeResponse) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{9}
}

func (m *ConsumeResponse) GetResponse() isConsumeResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ConsumeResponse) GetEvent() *Event {
	if x, ok := x.GetResponse().(*ConsumeResponse_Event); ok {
		return x.Event
	}
	return nil
}

func (x *ConsumeResponse) GetSubscribed() *ConsumeResponse_Subscribed {
	if x, ok := x.GetResponse().(*ConsumeResponse_Subscribed_); ok {
		return x.Subscribed
	}
	return nil
}

func (x *ConsumeResponse) GetAckConfirmation() *ConsumeResponse_AckConfirmation {
	if x, ok := x.GetResponse().(*ConsumeResponse_AckConfirmation_); ok {
		return x.AckConfirmation
	}
	return nil
}

func (x *ConsumeResponse) GetRejectConfirmation() *ConsumeResponse_RejectConfirmation {
	if x, ok := x.GetResponse().(*ConsumeResponse_RejectConfirmation_); ok {
		return x.RejectConfirmation
	}
	return nil
}

func (x *ConsumeResponse) GetPingConfirmation() *ConsumeResponse_PingConfirmation {
	if x, ok := x.GetResponse().(*ConsumeResponse_PingConfirmation_); ok {
		return x.PingConfirmation
	}
	return nil
}

type isConsumeResponse_Response interface {
	isConsumeResponse_Response()
}

type ConsumeResponse_Event struct {
	// An event that was published.
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

type ConsumeResponse_Subscribed_ struct {
	// Confirmation that the client has subscribed to events.
	Subscribed *ConsumeResponse_Subscribed `protobuf:"bytes,2,opt,name=subscribed,proto3,oneof"`
}

type ConsumeResponse_AckConfirmation_ struct {
	// Confirmation that some events were acknowledged.
	AckConfirmation *ConsumeResponse_AckConfirmation `protobuf:"bytes,3,opt,name=ack_confirmation,json=ackConfirmation,proto3,oneof"`
}

type ConsumeResponse_RejectConfirmation_ struct {
	// Confirmation that some events were rejected.
	RejectConfirmation *ConsumeResponse_RejectConfirmation `protobuf:"bytes,4,opt,name=reject_confirmation,json=rejectConfirmation,proto3,oneof"`
}

type ConsumeResponse_PingConfirmation_ struct {
	// Confirmation that a ping was received.
	PingConfirmation *ConsumeResponse_PingConfirmation `protobuf:"bytes,5,opt,name=ping_confirmation,json=pingConfirmation,proto3,oneof"`
}

func (*ConsumeResponse_Event) isConsumeResponse_Response() {}

func (*ConsumeResponse_Subscribed_) isConsumeResponse_Response() {}

func (*ConsumeResponse_AckConfirmation_) isConsumeResponse_Response() {}

func (*ConsumeResponse_RejectConfirmation_) isConsumeResponse_Response() {}

func (*ConsumeResponse_PingConfirmation_) isConsumeResponse_Response() {}

// A pointer to start receiving events from.
type StreamPointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Pointer:
	//
	//	*StreamPointer_Start
	//	*StreamPointer_End
	//	*StreamPointer_Time
	//	*StreamPointer_Offset
	Pointer isStreamPointer_Pointer `protobuf_oneof:"pointer"`
}

func (x *StreamPointer) Reset() {
	*x = StreamPointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPointer) ProtoMessage() {}

func (x *StreamPointer) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPointer.ProtoReflect.Descriptor instead.
func (*StreamPointer) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{10}
}

func (m *StreamPointer) GetPointer() isStreamPointer_Pointer {
	if m != nil {
		return m.Pointer
	}
	return nil
}

func (x *StreamPointer) GetStart() bool {
	if x, ok := x.GetPointer().(*StreamPointer_Start); ok {
		return x.Start
	}
	return false
}

func (x *StreamPointer) GetEnd() bool {
	if x, ok := x.GetPointer().(*StreamPointer_End); ok {
		return x.End
	}
	return false
}

func (x *StreamPointer) GetTime() *timestamppb.Timestamp {
	if x, ok := x.GetPointer().(*StreamPointer_Time); ok {
		return x.Time
	}
	return nil
}

func (x *StreamPointer) GetOffset() uint64 {
	if x, ok := x.GetPointer().(*StreamPointer_Offset); ok {
		return x.Offset
	}
	return 0
}

type isStreamPointer_Pointer interface {
	isStreamPointer_Pointer()
}

type StreamPointer_Start struct {
	// Receive all events currently available.
	Start bool `protobuf:"varint,1,opt,name=start,proto3,oneof"`
}

type StreamPointer_End struct {
	// Receive only future events.
	End bool `protobuf:"varint,2,opt,name=end,proto3,oneof"`
}

type StreamPointer_Time struct {
	// The time to start receiving events from.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3,oneof"`
}

type StreamPointer_Offset struct {
	// The id of the event to start receiving events from.
	Offset uint64 `protobuf:"varint,5,opt,name=offset,proto3,oneof"`
}

func (*StreamPointer_Start) isStreamPointer_Pointer() {}

func (*StreamPointer_End) isStreamPointer_Pointer() {}

func (*StreamPointer_Time) isStreamPointer_Pointer() {}

func (*StreamPointer_Offset) isStreamPointer_Pointer() {}

// An event that was published.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the event, used to acknowledge, reject or ping the event.
	// Can also be used to resume processing of events if using an ephemeral
	// subscriber.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The subject of this event.
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// Headers of the event.
	Headers *Headers `protobuf:"bytes,3,opt,name=headers,proto3" json:"headers,omitempty"`
	// Data of the event.
	Data *anypb.Any `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{11}
}

func (x *Event) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Event) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Event) GetHeaders() *Headers {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Event) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type Headers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of the event, if not set, the server will use the current time.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Key used to prevent duplicate events from being stored if a retry is
	// needed. Should be set to a unique value for each publish request of a
	// specific event.
	IdempotencyKey *string `protobuf:"bytes,2,opt,name=idempotency_key,json=idempotencyKey,proto3,oneof" json:"idempotency_key,omitempty"`
	// Parent trace id in the W3C trace context format.
	TraceParent *string `protobuf:"bytes,3,opt,name=trace_parent,json=traceParent,proto3,oneof" json:"trace_parent,omitempty"`
	// Trace state in the W3C trace context format.
	TraceState *string `protobuf:"bytes,4,opt,name=trace_state,json=traceState,proto3,oneof" json:"trace_state,omitempty"`
}

func (x *Headers) Reset() {
	*x = Headers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headers) ProtoMessage() {}

func (x *Headers) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headers.ProtoReflect.Descriptor instead.
func (*Headers) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{12}
}

func (x *Headers) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Headers) GetIdempotencyKey() string {
	if x != nil && x.IdempotencyKey != nil {
		return *x.IdempotencyKey
	}
	return ""
}

func (x *Headers) GetTraceParent() string {
	if x != nil && x.TraceParent != nil {
		return *x.TraceParent
	}
	return ""
}

func (x *Headers) GetTraceState() string {
	if x != nil && x.TraceState != nil {
		return *x.TraceState
	}
	return ""
}

// Policy for how events in the stream should be retained.
type EnsureStreamRequest_RetentionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum age of events in the stream. Events older than this will be
	// deleted.
	MaxAge *durationpb.Duration `protobuf:"bytes,1,opt,name=max_age,json=maxAge,proto3,oneof" json:"max_age,omitempty"`
	// Maximum number of events in the stream. Events beyond this limit will
	// be deleted.
	MaxEvents *uint64 `protobuf:"varint,2,opt,name=max_events,json=maxEvents,proto3,oneof" json:"max_events,omitempty"`
	// Maximum number of events per subject in the stream. Events beyond
	// this limit will be deleted.
	MaxEventsPerSubject *uint64 `protobuf:"varint,3,opt,name=max_events_per_subject,json=maxEventsPerSubject,proto3,oneof" json:"max_events_per_subject,omitempty"`
	// Maximum size of events in the stream. Events beyond this limit will
	// be deleted.
	MaxBytes *uint64 `protobuf:"varint,4,opt,name=max_bytes,json=maxBytes,proto3,oneof" json:"max_bytes,omitempty"`
	// Policy to use when discarding events the stream is full. Defaults
	// to discarding old events.
	DiscardPolicy *EnsureStreamRequest_DiscardPolicy `protobuf:"varint,5,opt,name=discard_policy,json=discardPolicy,proto3,enum=windshift.events.v1alpha1.EnsureStreamRequest_DiscardPolicy,oneof" json:"discard_policy,omitempty"`
	// If discard policy is set to discard new events, settings this to
	// true will discard new events per subject instead of globally.
	DiscardNewPerSubject *bool `protobuf:"varint,6,opt,name=discard_new_per_subject,json=discardNewPerSubject,proto3,oneof" json:"discard_new_per_subject,omitempty"`
}

func (x *EnsureStreamRequest_RetentionPolicy) Reset() {
	*x = EnsureStreamRequest_RetentionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureStreamRequest_RetentionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureStreamRequest_RetentionPolicy) ProtoMessage() {}

func (x *EnsureStreamRequest_RetentionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureStreamRequest_RetentionPolicy.ProtoReflect.Descriptor instead.
func (*EnsureStreamRequest_RetentionPolicy) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EnsureStreamRequest_RetentionPolicy) GetMaxAge() *durationpb.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *EnsureStreamRequest_RetentionPolicy) GetMaxEvents() uint64 {
	if x != nil && x.MaxEvents != nil {
		return *x.MaxEvents
	}
	return 0
}

func (x *EnsureStreamRequest_RetentionPolicy) GetMaxEventsPerSubject() uint64 {
	if x != nil && x.MaxEventsPerSubject != nil {
		return *x.MaxEventsPerSubject
	}
	return 0
}

func (x *EnsureStreamRequest_RetentionPolicy) GetMaxBytes() uint64 {
	if x != nil && x.MaxBytes != nil {
		return *x.MaxBytes
	}
	return 0
}

func (x *EnsureStreamRequest_RetentionPolicy) GetDiscardPolicy() EnsureStreamRequest_DiscardPolicy {
	if x != nil && x.DiscardPolicy != nil {
		return *x.DiscardPolicy
	}
	return EnsureStreamRequest_DISCARD_POLICY_UNSPECIFIED
}

func (x *EnsureStreamRequest_RetentionPolicy) GetDiscardNewPerSubject() bool {
	if x != nil && x.DiscardNewPerSubject != nil {
		return *x.DiscardNewPerSubject
	}
	return false
}

// List of subjects that will be collected into the stream.
type EnsureStreamRequest_Subjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of subjects.
	Subjects []string `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *EnsureStreamRequest_Subjects) Reset() {
	*x = EnsureStreamRequest_Subjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureStreamRequest_Subjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureStreamRequest_Subjects) ProtoMessage() {}

func (x *EnsureStreamRequest_Subjects) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureStreamRequest_Subjects.ProtoReflect.Descriptor instead.
func (*EnsureStreamRequest_Subjects) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *EnsureStreamRequest_Subjects) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

// A stream that can be mirrored into the stream.
type EnsureStreamRequest_StreamSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stream to receive events from.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optionally define where to start receiving events from.
	Pointer *StreamPointer `protobuf:"bytes,2,opt,name=pointer,proto3,oneof" json:"pointer,omitempty"`
	// Optionally filter events by subject.
	FilterSubjects []string `protobuf:"bytes,3,rep,name=filter_subjects,json=filterSubjects,proto3" json:"filter_subjects,omitempty"`
}

func (x *EnsureStreamRequest_StreamSource) Reset() {
	*x = EnsureStreamRequest_StreamSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureStreamRequest_StreamSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureStreamRequest_StreamSource) ProtoMessage() {}

func (x *EnsureStreamRequest_StreamSource) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureStreamRequest_StreamSource.ProtoReflect.Descriptor instead.
func (*EnsureStreamRequest_StreamSource) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{0, 2}
}

func (x *EnsureStreamRequest_StreamSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnsureStreamRequest_StreamSource) GetPointer() *StreamPointer {
	if x != nil {
		return x.Pointer
	}
	return nil
}

func (x *EnsureStreamRequest_StreamSource) GetFilterSubjects() []string {
	if x != nil {
		return x.FilterSubjects
	}
	return nil
}

// Multiple streams that can be mirrored into the stream.
type EnsureStreamRequest_StreamSources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streams to receive events from.
	Sources []*EnsureStreamRequest_StreamSource `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *EnsureStreamRequest_StreamSources) Reset() {
	*x = EnsureStreamRequest_StreamSources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureStreamRequest_StreamSources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureStreamRequest_StreamSources) ProtoMessage() {}

func (x *EnsureStreamRequest_StreamSources) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureStreamRequest_StreamSources.ProtoReflect.Descriptor instead.
func (*EnsureStreamRequest_StreamSources) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{0, 3}
}

func (x *EnsureStreamRequest_StreamSources) GetSources() []*EnsureStreamRequest_StreamSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

// Define how the stream should be stored.
type EnsureStreamRequest_Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of storage to use for the stream.
	Type *EnsureStreamRequest_StorageType `protobuf:"varint,1,opt,name=type,proto3,enum=windshift.events.v1alpha1.EnsureStreamRequest_StorageType,oneof" json:"type,omitempty"`
	// Number of replicas to use for the stream.
	Replicas *uint32 `protobuf:"varint,2,opt,name=replicas,proto3,oneof" json:"replicas,omitempty"`
}

func (x *EnsureStreamRequest_Storage) Reset() {
	*x = EnsureStreamRequest_Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureStreamRequest_Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureStreamRequest_Storage) ProtoMessage() {}

func (x *EnsureStreamRequest_Storage) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureStreamRequest_Storage.ProtoReflect.Descriptor instead.
func (*EnsureStreamRequest_Storage) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{0, 4}
}

func (x *EnsureStreamRequest_Storage) GetType() EnsureStreamRequest_StorageType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EnsureStreamRequest_STORAGE_TYPE_UNSPECIFIED
}

func (x *EnsureStreamRequest_Storage) GetReplicas() uint32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

// Subscribe to events, must be sent as the first message in the stream.
type ConsumeRequest_Subscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the stream to subscribe to.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The id of the consumer, should be an id previously created using
	// EnsureConsumer.
	Consumer string `protobuf:"bytes,2,opt,name=consumer,proto3" json:"consumer,omitempty"`
	// The maximum number of events to process at once. If not provided
	// a limit of 50 will be used.
	//
	// In most cases this should be set to approximately the number of
	// events that can be processed in parallel plus a small buffer. The
	// server will ramp up events to this limit, and will only send more
	// events once the client has acknowledged or rejected events.
	MaxProcessingEvents *uint64 `protobuf:"varint,4,opt,name=max_processing_events,json=maxProcessingEvents,proto3,oneof" json:"max_processing_events,omitempty"`
}

func (x *ConsumeRequest_Subscribe) Reset() {
	*x = ConsumeRequest_Subscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeRequest_Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeRequest_Subscribe) ProtoMessage() {}

func (x *ConsumeRequest_Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeRequest_Subscribe.ProtoReflect.Descriptor instead.
func (*ConsumeRequest_Subscribe) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ConsumeRequest_Subscribe) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *ConsumeRequest_Subscribe) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

func (x *ConsumeRequest_Subscribe) GetMaxProcessingEvents() uint64 {
	if x != nil && x.MaxProcessingEvents != nil {
		return *x.MaxProcessingEvents
	}
	return 0
}

// Ack indicates that some events have been successfully processed.
type ConsumeRequest_Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers to acknowledge.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ConsumeRequest_Ack) Reset() {
	*x = ConsumeRequest_Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeRequest_Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeRequest_Ack) ProtoMessage() {}

func (x *ConsumeRequest_Ack) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeRequest_Ack.ProtoReflect.Descriptor instead.
func (*ConsumeRequest_Ack) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ConsumeRequest_Ack) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Reject indicates that some events have failed to be processed.
type ConsumeRequest_Reject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers to reject.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// Permanently reject the events, if not provided the events will be
	// retried after a timeout. If permanently is set to true, the events
	// will not be redelivered.
	Permanently *bool `protobuf:"varint,2,opt,name=permanently,proto3,oneof" json:"permanently,omitempty"`
	// Optional time to wait before redelivering the events. If not
	// provided the server will decide how long to wait.
	Delay *durationpb.Duration `protobuf:"bytes,3,opt,name=delay,proto3,oneof" json:"delay,omitempty"`
}

func (x *ConsumeRequest_Reject) Reset() {
	*x = ConsumeRequest_Reject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeRequest_Reject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeRequest_Reject) ProtoMessage() {}

func (x *ConsumeRequest_Reject) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeRequest_Reject.ProtoReflect.Descriptor instead.
func (*ConsumeRequest_Reject) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{8, 2}
}

func (x *ConsumeRequest_Reject) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ConsumeRequest_Reject) GetPermanently() bool {
	if x != nil && x.Permanently != nil {
		return *x.Permanently
	}
	return false
}

func (x *ConsumeRequest_Reject) GetDelay() *durationpb.Duration {
	if x != nil {
		return x.Delay
	}
	return nil
}

// Ping events to indicate that they are still being processed.
type ConsumeRequest_Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers of the events that are currently being processed.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ConsumeRequest_Ping) Reset() {
	*x = ConsumeRequest_Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeRequest_Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeRequest_Ping) ProtoMessage() {}

func (x *ConsumeRequest_Ping) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeRequest_Ping.ProtoReflect.Descriptor instead.
func (*ConsumeRequest_Ping) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{8, 3}
}

func (x *ConsumeRequest_Ping) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Confirmation that the client has subscribed to events.
type ConsumeResponse_Subscribed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timeout for events, after which they will be resent if not
	// acknowledged or rejected. Can be used by the client to implements
	// features such as pings.
	ProcessingTimeout *durationpb.Duration `protobuf:"bytes,1,opt,name=processing_timeout,json=processingTimeout,proto3" json:"processing_timeout,omitempty"`
}

func (x *ConsumeResponse_Subscribed) Reset() {
	*x = ConsumeResponse_Subscribed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeResponse_Subscribed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeResponse_Subscribed) ProtoMessage() {}

func (x *ConsumeResponse_Subscribed) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeResponse_Subscribed.ProtoReflect.Descriptor instead.
func (*ConsumeResponse_Subscribed) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ConsumeResponse_Subscribed) GetProcessingTimeout() *durationpb.Duration {
	if x != nil {
		return x.ProcessingTimeout
	}
	return nil
}

// Confirmation that some events were acknowledged.
type ConsumeResponse_AckConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers that were acknowledged.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// Identifiers that were invalid, such as already being acknowledged or
	// rejected, should not be retried by the client.
	InvalidIds []uint64 `protobuf:"varint,2,rep,packed,name=invalid_ids,json=invalidIds,proto3" json:"invalid_ids,omitempty"`
	// Identifiers that could not be processed temporarily, should be
	// retried by the client.
	TemporaryFailedIds []uint64 `protobuf:"varint,3,rep,packed,name=temporary_failed_ids,json=temporaryFailedIds,proto3" json:"temporary_failed_ids,omitempty"`
}

func (x *ConsumeResponse_AckConfirmation) Reset() {
	*x = ConsumeResponse_AckConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeResponse_AckConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeResponse_AckConfirmation) ProtoMessage() {}

func (x *ConsumeResponse_AckConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeResponse_AckConfirmation.ProtoReflect.Descriptor instead.
func (*ConsumeResponse_AckConfirmation) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{9, 1}
}

func (x *ConsumeResponse_AckConfirmation) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ConsumeResponse_AckConfirmation) GetInvalidIds() []uint64 {
	if x != nil {
		return x.InvalidIds
	}
	return nil
}

func (x *ConsumeResponse_AckConfirmation) GetTemporaryFailedIds() []uint64 {
	if x != nil {
		return x.TemporaryFailedIds
	}
	return nil
}

// Confirmation that some events were rejected.
type ConsumeResponse_RejectConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers that were rejected.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// Identifiers that were invalid, such as already being acknowledged or
	// rejected, should not be retried by the client.
	InvalidIds []uint64 `protobuf:"varint,2,rep,packed,name=invalid_ids,json=invalidIds,proto3" json:"invalid_ids,omitempty"`
	// Identifiers that could not be processed temporarily, should be
	// retried by the client.
	TemporaryFailedIds []uint64 `protobuf:"varint,3,rep,packed,name=temporary_failed_ids,json=temporaryFailedIds,proto3" json:"temporary_failed_ids,omitempty"`
}

func (x *ConsumeResponse_RejectConfirmation) Reset() {
	*x = ConsumeResponse_RejectConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeResponse_RejectConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeResponse_RejectConfirmation) ProtoMessage() {}

func (x *ConsumeResponse_RejectConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeResponse_RejectConfirmation.ProtoReflect.Descriptor instead.
func (*ConsumeResponse_RejectConfirmation) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{9, 2}
}

func (x *ConsumeResponse_RejectConfirmation) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ConsumeResponse_RejectConfirmation) GetInvalidIds() []uint64 {
	if x != nil {
		return x.InvalidIds
	}
	return nil
}

func (x *ConsumeResponse_RejectConfirmation) GetTemporaryFailedIds() []uint64 {
	if x != nil {
		return x.TemporaryFailedIds
	}
	return nil
}

// Confirmation that a ping was received.
type ConsumeResponse_PingConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifiers of the events that are currently being processed.
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// Identifiers that were invalid, such as already being acknowledged or
	// rejected, should not be retried by the client.
	InvalidIds []uint64 `protobuf:"varint,2,rep,packed,name=invalid_ids,json=invalidIds,proto3" json:"invalid_ids,omitempty"`
	// Identifiers that could not be processed temporarily, should be
	// retried by the client.
	TemporaryFailedIds []uint64 `protobuf:"varint,3,rep,packed,name=temporary_failed_ids,json=temporaryFailedIds,proto3" json:"temporary_failed_ids,omitempty"`
}

func (x *ConsumeResponse_PingConfirmation) Reset() {
	*x = ConsumeResponse_PingConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeResponse_PingConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeResponse_PingConfirmation) ProtoMessage() {}

func (x *ConsumeResponse_PingConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_windshift_events_v1alpha1_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeResponse_PingConfirmation.ProtoReflect.Descriptor instead.
func (*ConsumeResponse_PingConfirmation) Descriptor() ([]byte, []int) {
	return file_windshift_events_v1alpha1_service_proto_rawDescGZIP(), []int{9, 3}
}

func (x *ConsumeResponse_PingConfirmation) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ConsumeResponse_PingConfirmation) GetInvalidIds() []uint64 {
	if x != nil {
		return x.InvalidIds
	}
	return nil
}

func (x *ConsumeResponse_PingConfirmation) GetTemporaryFailedIds() []uint64 {
	if x != nil {
		return x.TemporaryFailedIds
	}
	return nil
}

var File_windshift_events_v1alpha1_service_proto protoreflect.FileDescriptor

var file_windshift_events_v1alpha1_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x77, 0x69, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc0, 0x0e, 0x0a, 0x13, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x10,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5c, 0x0a, 0x09, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x69, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x48, 0x02, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x51, 0x0a, 0x14, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x13, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x1a, 0xe3, 0x03,
	0x0a, 0x0f, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x48, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x1a, 0x26, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0xa0, 0x01, 0x0a, 0x0c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x66,
	0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x5f,
	0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x4f, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x02, 0x22,
	0x5b, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x15,
	0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52,
	0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x02, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x28, 0x0a, 0x16, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x13,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xa1, 0x05, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x41, 0x0a, 0x03, 0x61, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x4a, 0x0a,
	0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x1a,
	0x92, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0x17, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x91, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x1a, 0x18, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbb, 0x07, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x69, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x67, 0x0a,
	0x10, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x13, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x56, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x76, 0x0a, 0x0f,
	0x41, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x49, 0x64, 0x73, 0x1a, 0x79, 0x0a, 0x12, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x1a,
	0x77, 0x0a, 0x10, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3c, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x02, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x69, 0x64, 0x65,
	0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69,
	0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x32,
	0xc9, 0x04, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x6f, 0x0a, 0x0c, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x2e, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e,
	0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e,
	0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x75, 0x0a, 0x0e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x77, 0x69,
	0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x71, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x29,
	0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x69, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0xfe, 0x01, 0x0a, 0x1d,
	0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x77,
	0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x77, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x57, 0x45, 0x58, 0xaa, 0x02,
	0x19, 0x57, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x19, 0x57, 0x69, 0x6e,
	0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x25, 0x57, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1b, 0x57, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_windshift_events_v1alpha1_service_proto_rawDescOnce sync.Once
	file_windshift_events_v1alpha1_service_proto_rawDescData = file_windshift_events_v1alpha1_service_proto_rawDesc
)

func file_windshift_events_v1alpha1_service_proto_rawDescGZIP() []byte {
	file_windshift_events_v1alpha1_service_proto_rawDescOnce.Do(func() {
		file_windshift_events_v1alpha1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_windshift_events_v1alpha1_service_proto_rawDescData)
	})
	return file_windshift_events_v1alpha1_service_proto_rawDescData
}

var file_windshift_events_v1alpha1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_windshift_events_v1alpha1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_windshift_events_v1alpha1_service_proto_goTypes = []interface{}{
	(EnsureStreamRequest_DiscardPolicy)(0),      // 0: windshift.events.v1alpha1.EnsureStreamRequest.DiscardPolicy
	(EnsureStreamRequest_StorageType)(0),        // 1: windshift.events.v1alpha1.EnsureStreamRequest.StorageType
	(*EnsureStreamRequest)(nil),                 // 2: windshift.events.v1alpha1.EnsureStreamRequest
	(*EnsureStreamResponse)(nil),                // 3: windshift.events.v1alpha1.EnsureStreamResponse
	(*EnsureConsumerRequest)(nil),               // 4: windshift.events.v1alpha1.EnsureConsumerRequest
	(*EnsureConsumerResponse)(nil),              // 5: windshift.events.v1alpha1.EnsureConsumerResponse
	(*DeleteConsumerRequest)(nil),               // 6: windshift.events.v1alpha1.DeleteConsumerRequest
	(*DeleteConsumerResponse)(nil),              // 7: windshift.events.v1alpha1.DeleteConsumerResponse
	(*PublishEventRequest)(nil),                 // 8: windshift.events.v1alpha1.PublishEventRequest
	(*PublishEventResponse)(nil),                // 9: windshift.events.v1alpha1.PublishEventResponse
	(*ConsumeRequest)(nil),                      // 10: windshift.events.v1alpha1.ConsumeRequest
	(*ConsumeResponse)(nil),                     // 11: windshift.events.v1alpha1.ConsumeResponse
	(*StreamPointer)(nil),                       // 12: windshift.events.v1alpha1.StreamPointer
	(*Event)(nil),                               // 13: windshift.events.v1alpha1.Event
	(*Headers)(nil),                             // 14: windshift.events.v1alpha1.Headers
	(*EnsureStreamRequest_RetentionPolicy)(nil), // 15: windshift.events.v1alpha1.EnsureStreamRequest.RetentionPolicy
	(*EnsureStreamRequest_Subjects)(nil),        // 16: windshift.events.v1alpha1.EnsureStreamRequest.Subjects
	(*EnsureStreamRequest_StreamSource)(nil),    // 17: windshift.events.v1alpha1.EnsureStreamRequest.StreamSource
	(*EnsureStreamRequest_StreamSources)(nil),   // 18: windshift.events.v1alpha1.EnsureStreamRequest.StreamSources
	(*EnsureStreamRequest_Storage)(nil),         // 19: windshift.events.v1alpha1.EnsureStreamRequest.Storage
	(*ConsumeRequest_Subscribe)(nil),            // 20: windshift.events.v1alpha1.ConsumeRequest.Subscribe
	(*ConsumeRequest_Ack)(nil),                  // 21: windshift.events.v1alpha1.ConsumeRequest.Ack
	(*ConsumeRequest_Reject)(nil),               // 22: windshift.events.v1alpha1.ConsumeRequest.Reject
	(*ConsumeRequest_Ping)(nil),                 // 23: windshift.events.v1alpha1.ConsumeRequest.Ping
	(*ConsumeResponse_Subscribed)(nil),          // 24: windshift.events.v1alpha1.ConsumeResponse.Subscribed
	(*ConsumeResponse_AckConfirmation)(nil),     // 25: windshift.events.v1alpha1.ConsumeResponse.AckConfirmation
	(*ConsumeResponse_RejectConfirmation)(nil),  // 26: windshift.events.v1alpha1.ConsumeResponse.RejectConfirmation
	(*ConsumeResponse_PingConfirmation)(nil),    // 27: windshift.events.v1alpha1.ConsumeResponse.PingConfirmation
	(*durationpb.Duration)(nil),                 // 28: google.protobuf.Duration
	(*anypb.Any)(nil),                           // 29: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),               // 30: google.protobuf.Timestamp
}
var file_windshift_events_v1alpha1_service_proto_depIdxs = []int32{
	15, // 0: windshift.events.v1alpha1.EnsureStreamRequest.retention_policy:type_name -> windshift.events.v1alpha1.EnsureStreamRequest.RetentionPolicy
	16, // 1: windshift.events.v1alpha1.EnsureStreamRequest.subjects:type_name -> windshift.events.v1alpha1.EnsureStreamRequest.Subjects
	17, // 2: windshift.events.v1alpha1.EnsureStreamRequest.mirror:type_name -> windshift.events.v1alpha1.EnsureStreamRequest.StreamSource
	18, // 3: windshift.events.v1alpha1.EnsureStreamRequest.aggregate:type_name -> windshift.events.v1alpha1.EnsureStreamRequest.StreamSources
	19, // 4: windshift.events.v1alpha1.EnsureStreamRequest.storage:type_name -> windshift.events.v1alpha1.EnsureStreamRequest.Storage
	28, // 5: windshift.events.v1alpha1.EnsureStreamRequest.deduplication_window:type_name -> google.protobuf.Duration
	12, // 6: windshift.events.v1alpha1.EnsureConsumerRequest.pointer:type_name -> windshift.events.v1alpha1.StreamPointer
	28, // 7: windshift.events.v1alpha1.EnsureConsumerRequest.processing_timeout:type_name -> google.protobuf.Duration
	29, // 8: windshift.events.v1alpha1.PublishEventRequest.data:type_name -> google.protobuf.Any
	30, // 9: windshift.events.v1alpha1.PublishEventRequest.timestamp:type_name -> google.protobuf.Timestamp
	20, // 10: windshift.events.v1alpha1.ConsumeRequest.subscribe:type_name -> windshift.events.v1alpha1.ConsumeRequest.Subscribe
	21, // 11: windshift.events.v1alpha1.ConsumeRequest.ack:type_name -> windshift.events.v1alpha1.ConsumeRequest.Ack
	22, // 12: windshift.events.v1alpha1.ConsumeRequest.reject:type_name -> windshift.events.v1alpha1.ConsumeRequest.Reject
	23, // 13: windshift.events.v1alpha1.ConsumeRequest.ping:type_name -> windshift.events.v1alpha1.ConsumeRequest.Ping
	13, // 14: windshift.events.v1alpha1.ConsumeResponse.event:type_name -> windshift.events.v1alpha1.Event
	24, // 15: windshift.events.v1alpha1.ConsumeResponse.subscribed:type_name -> windshift.events.v1alpha1.ConsumeResponse.Subscribed
	25, // 16: windshift.events.v1alpha1.ConsumeResponse.ack_confirmation:type_name -> windshift.events.v1alpha1.ConsumeResponse.AckConfirmation
	26, // 17: windshift.events.v1alpha1.ConsumeResponse.reject_confirmation:type_name -> windshift.events.v1alpha1.ConsumeResponse.RejectConfirmation
	27, // 18: windshift.events.v1alpha1.ConsumeResponse.ping_confirmation:type_name -> windshift.events.v1alpha1.ConsumeResponse.PingConfirmation
	30, // 19: windshift.events.v1alpha1.StreamPointer.time:type_name -> google.protobuf.Timestamp
	14, // 20: windshift.events.v1alpha1.Event.headers:type_name -> windshift.events.v1alpha1.Headers
	29, // 21: windshift.events.v1alpha1.Event.data:type_name -> google.protobuf.Any
	30, // 22: windshift.events.v1alpha1.Headers.timestamp:type_name -> google.protobuf.Timestamp
	28, // 23: windshift.events.v1alpha1.EnsureStreamRequest.RetentionPolicy.max_age:type_name -> google.protobuf.Duration
	0,  // 24: windshift.events.v1alpha1.EnsureStreamRequest.RetentionPolicy.discard_policy:type_name -> windshift.events.v1alpha1.EnsureStreamRequest.DiscardPolicy
	12, // 25: windshift.events.v1alpha1.EnsureStreamRequest.StreamSource.pointer:type_name -> windshift.events.v1alpha1.StreamPointer
	17, // 26: windshift.events.v1alpha1.EnsureStreamRequest.StreamSources.sources:type_name -> windshift.events.v1alpha1.EnsureStreamRequest.StreamSource
	1,  // 27: windshift.events.v1alpha1.EnsureStreamRequest.Storage.type:type_name -> windshift.events.v1alpha1.EnsureStreamRequest.StorageType
	28, // 28: windshift.events.v1alpha1.ConsumeRequest.Reject.delay:type_name -> google.protobuf.Duration
	28, // 29: windshift.events.v1alpha1.ConsumeResponse.Subscribed.processing_timeout:type_name -> google.protobuf.Duration
	2,  // 30: windshift.events.v1alpha1.EventsService.EnsureStream:input_type -> windshift.events.v1alpha1.EnsureStreamRequest
	4,  // 31: windshift.events.v1alpha1.EventsService.EnsureConsumer:input_type -> windshift.events.v1alpha1.EnsureConsumerRequest
	6,  // 32: windshift.events.v1alpha1.EventsService.DeleteConsumer:input_type -> windshift.events.v1alpha1.DeleteConsumerRequest
	8,  // 33: windshift.events.v1alpha1.EventsService.PublishEvent:input_type -> windshift.events.v1alpha1.PublishEventRequest
	10, // 34: windshift.events.v1alpha1.EventsService.Consume:input_type -> windshift.events.v1alpha1.ConsumeRequest
	3,  // 35: windshift.events.v1alpha1.EventsService.EnsureStream:output_type -> windshift.events.v1alpha1.EnsureStreamResponse
	5,  // 36: windshift.events.v1alpha1.EventsService.EnsureConsumer:output_type -> windshift.events.v1alpha1.EnsureConsumerResponse
	7,  // 37: windshift.events.v1alpha1.EventsService.DeleteConsumer:output_type -> windshift.events.v1alpha1.DeleteConsumerResponse
	9,  // 38: windshift.events.v1alpha1.EventsService.PublishEvent:output_type -> windshift.events.v1alpha1.PublishEventResponse
	11, // 39: windshift.events.v1alpha1.EventsService.Consume:output_type -> windshift.events.v1alpha1.ConsumeResponse
	35, // [35:40] is the sub-list for method output_type
	30, // [30:35] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_windshift_events_v1alpha1_service_proto_init() }
func file_windshift_events_v1alpha1_service_proto_init() {
	if File_windshift_events_v1alpha1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_windshift_events_v1alpha1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamPointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureStreamRequest_RetentionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureStreamRequest_Subjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureStreamRequest_StreamSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureStreamRequest_StreamSources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureStreamRequest_Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeRequest_Subscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeRequest_Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeRequest_Reject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeRequest_Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeResponse_Subscribed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeResponse_AckConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeResponse_RejectConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_windshift_events_v1alpha1_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeResponse_PingConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_windshift_events_v1alpha1_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EnsureStreamRequest_Subjects_)(nil),
		(*EnsureStreamRequest_Mirror)(nil),
		(*EnsureStreamRequest_Aggregate)(nil),
	}
	file_windshift_events_v1alpha1_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_windshift_events_v1alpha1_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_windshift_events_v1alpha1_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ConsumeRequest_Subscribe_)(nil),
		(*ConsumeRequest_Ack_)(nil),
		(*ConsumeRequest_Reject_)(nil),
		(*ConsumeRequest_Ping_)(nil),
	}
	file_windshift_events_v1alpha1_service_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ConsumeResponse_Event)(nil),
		(*ConsumeResponse_Subscribed_)(nil),
		(*ConsumeResponse_AckConfirmation_)(nil),
		(*ConsumeResponse_RejectConfirmation_)(nil),
		(*ConsumeResponse_PingConfirmation_)(nil),
	}
	file_windshift_events_v1alpha1_service_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*StreamPointer_Start)(nil),
		(*StreamPointer_End)(nil),
		(*StreamPointer_Time)(nil),
		(*StreamPointer_Offset)(nil),
	}
	file_windshift_events_v1alpha1_service_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_windshift_events_v1alpha1_service_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_windshift_events_v1alpha1_service_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_windshift_events_v1alpha1_service_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_windshift_events_v1alpha1_service_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_windshift_events_v1alpha1_service_proto_msgTypes[20].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_windshift_events_v1alpha1_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_windshift_events_v1alpha1_service_proto_goTypes,
		DependencyIndexes: file_windshift_events_v1alpha1_service_proto_depIdxs,
		EnumInfos:         file_windshift_events_v1alpha1_service_proto_enumTypes,
		MessageInfos:      file_windshift_events_v1alpha1_service_proto_msgTypes,
	}.Build()
	File_windshift_events_v1alpha1_service_proto = out.File
	file_windshift_events_v1alpha1_service_proto_rawDesc = nil
	file_windshift_events_v1alpha1_service_proto_goTypes = nil
	file_windshift_events_v1alpha1_service_proto_depIdxs = nil
}
